//************************************************
// FILE NAME : connect.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
//
//************************************************

{load_file("loadinfo.hoc")}

objref rnclist
rnclist = new List()
proc mkPreSynapseOnRN(){local i, gid_base localobj syn, nil, nc
    gid_base = $1
    if(pc.id==0) print "(syn_gid, pc.id)"
    for i=0, rns.count()-1{
	//print i
	gid_cnt  = 0
	forsec rns.object(i).axonlist{
	    nc = new NetCon(&v(0.5),nil) 
	    nc.threshold = 1
	    syn_gid = calcSyngid(gid_base, gid_cnt, i)
	    pc.set_gid2node(syn_gid,pc.id)
	    pc.cell(syn_gid, nc)
	    rnclist.append(nc)
	    //printf("(%d, %d)\t",syn_gid, pc.id)
	    gid_cnt += 1
	}
    }
    printf("Max synapse gid %d\n",syn_gid)
}
func calcSyngid(){local base, cnt,gid,cellcnt,wholecnt,cnt2
    base = $1
    cnt  = $2//dendrite number conuter
    cnt2 = $3//cell number counter
    wholecnt = 0
    cellcnt  = 0
    for i=0, pc.id-1{
	cellcnt += CELLM.x[i][2]
    }
    gid = base + cnt*NRN + cellcnt + cnt2
    return gid
}

func calcSrcgid(){local base,syn_cnt, gid
    base =    $1
    syn_cnt = $2
    cnt  = $3
    gid = base + syn_cnt + cnt*NRN //this equation should be changed when i make this network more bigger
    //just for the test
    return gid
}
objref nclist
nclist = new List()
proc mkPostSynapseOfRN(){local i,j,gid_base,src_gid localobj target, syn, nc
    gid_base = $1
    print gid_base
    for i=0, NPN+NLN-1{
	if(pc.gid_exists(i)){
	    target = pc.gid2obj(i)
	    loadSynapseInfo(target)
	    target.mkSynapses(target.fromRNsyn)
	    print "end load synapse info"
	    for j=0, target.synlist.count()-1{
		syn = target.synlist.o(j)
		src_gid = calcSrcgid(gid_base, j, i)
		print "src_gid ", src_gid
		nc  = pc.gid_connect(src_gid, syn)
		//nc.delay  = 1.0
		//nc.weight = 1.0
		nclist.append(nc)
	    }
	}
    }
}

proc connectRNtoOthers(){\
    local gid_base
    gid_base = 1000000
    mkPreSynapseOnRN(gid_base)
    pc.barrier()
    mkPostSynapseOfRN(gid_base)
    pc.barrier()
}

proc setSynapseInfo(){\
    localobj cell
    for i=0, NPN+NLN-1{
	if(pc.gid_exists(i)){
	    cell = pc.gid2obj(i)
	    loadSynapseInfo(cell)
	}
    }
}

//----------------------------------------------------
// Connect Neurons to Neurons
// for example ln to ln, ln to pn
proc connectNtoN(){

}