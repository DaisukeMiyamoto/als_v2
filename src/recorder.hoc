//************************************************
// FILE NAME : recorder.hoc
// 2015.05.13
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//

//************************************************
// FUNCTION LIST
//************************************************
//
//************************************************

strdef FPRINT_DIR
if(IS_SUPERCOMPUTER == 1){
    FPRINT_DIR = "./"
}else if(START_TIME == 0){
    FPRINT_DIR = "../result/record/"
}else{
    sprint(FPRINT_DIR,"../result/%010d/record/",START_TIME)
}
if(pc.id == 0){
    printf("OUTPUT DIR : %s\n",FPRINT_DIR)
}
/*
objref tvec, idvec, ncreclist
proc spikerecord(){local i localobj nc, nil
    tvec    = new Vector()
    idvec   = new Vector()
    ncreclist = new List()
    
    if(pns.count()!=0){
	printf("spikerecord(%d) for PN\n",pc.id)
	pns.o(i).Dend[21] nc = new NetCon(&v(0.5),nil)
	nc.record(tvec)
	ncreclist.append(nc)
    }else if(lns.count()!=0){
	printf("spikerecord(%d) for LN\n",pc.id)
	lns.o(i).Dend[21] nc = new NetCon(&v(0.5),nil)
	nc.record(tvec)
	ncreclist.append(nc)
    }else if(rns.count()!=0){
   	printf("spikerecord(%d) for RN\n",pc.id)
	rns.o(i).Dend[0] nc = new NetCon(&v(0.5),nil)
	nc.record(tvec)
	ncreclist.append(nc)
    }    
}
*/
/*
proc spikeout(){local i, rank localobj f
    strdef fn
    if(pns.count()!=0){
	printf("spike out(%d) for PN\n",pc.id)
	f = new File()
	sprint(fn,"%s%dSpikeTiming.dat",FPRINT_DIR,pns.o(0).nid)
	f.wopen(fn)
	f.printf("\ntime\t cell\n")
	for i = 0, tvec.size-1{
	    f.printf("%g\t %d\n",tvec.x[i],idvec.x[i])
	}
	f.close()   
    }
    if(lns.count()!=0){
	printf("spike out(%d) for LN\n",pc.id)
	f = new File()
	sprint(fn,"%s%dSpikeTiming.dat",FPRINT_DIR,lns.o(0).nid)
	f.wopen(fn)
	f.printf("\ntime\t cell\n")
	for i = 0, tvec.size-1{
	    f.printf("%g\t %d\n",tvec.x[i],idvec.x[i])
	}
	f.close()   
    }
    if(rns.count()!=0){
	printf("spike out(%d) for RN\n",pc.id)
	f = new File()
	sprint(fn,"%s%dSpikeTiming.dat",FPRINT_DIR,rns.o(0).nid)
	f.wopen(fn)
	f.printf("\ntime\t cell\n")
	for i = 0, tvec.size-1{
	    f.printf("%g\t %d\n",tvec.x[i],idvec.x[i])
	}
	f.close()
    }
}
*/
proc spikerecord(){local i localobj nc, nil
    if(pns.count()!=0){
	printf("spikerecord(%d) for PN\n",pc.id)
	pns.o(0).setSpikeRecord(475)
    }else if(lns.count()!=0){
	printf("spikerecord(%d) for LN\n",pc.id)
	if(lns.o(0).swcid == 0){
	    lns.o(0).setSpikeRecord(21706)
	}else if(lns.o(0).swcid == 1){
	    lns.o(0).setSpikeRecord(11197)
	}
    }else if(rns.count()!=0){
   	printf("spikerecord(%d) for RN\n",pc.id)
	rns.o(0).setSpikeRecord(60)
    }    
}

proc spikeout(){
    if(pns.count()!=0){
	printf("spike out(%d) for PN\n",pc.id)
	pns.o(0).fprintSpikeRecord(FPRINT_DIR,INTERVAL,STOPTIME)
    }
    if(lns.count()!=0){
	printf("spike out(%d) for LN\n",pc.id)
	lns.o(0).fprintSpikeRecord(FPRINT_DIR,INTERVAL,STOPTIME)	    
    }
    if(rns.count()!=0){
	printf("spike out(%d) for RN\n",pc.id)
	rns.o(0).fprintSpikeRecord(FPRINT_DIR,INTERVAL,STOPTIME)	
    }
}

objref PNvolt_vec
objref LNvolt_vec
objref PNvolt_list
objref LNvolt_list
objref RNvolt_list
/*
objref PNvolt_vecs[4000]
objref LNvolt_vecs[4000]
objref RNvolt_vecs[60000]
*/
objref volt_tvec

proc setVoltageRecord(){local i,j localobj volt_vec
    volt_tvec = new Vector()
    volt_tvec.record(&t)
    printf("SIZE OF VECTOR : %d\n",volt_tvec.buffer_size())
    if(pns.count()!=0){PNvolt_list = new List()}
    if(lns.count()!=0){LNvolt_list = new List()}
    if(rns.count()!=0){RNvolt_list = new List()}

    for(j = 0; j<pns.count();j+=1){
	//printf("PN record(id:%d)\n",(pc.id))
	//printf("pns.count %d#\n",pns.count())
	print j
	if(j == 0){
	    PNvolt_vec = new Vector()
	    //PNvolt_vec.record(&projection.Dend[1211].v(0.5))
	    PNvolt_vec.record(&pns.o(j).Dend[475].v(0.5))
	    //printf("pns.o(%d).SynNumerList.size(): %d#\n",j,pns.o(j).SynNumberList.size())
	    for (i=0; i<pns.o(j).SynNumberList.size();i+=100){
		//print pns.o(j).SynNumberList.x[i]
		volt_vec = new Vector()
		//PNvolt_vecs[i].record(&pns.o(j).Dend[pns.o(j).SynNumberList.x[i]].v(0.5))
		volt_vec.record(&pns.o(j).Dend[pns.o(j).SynNumberList.x[i]].v(0.5))
		PNvolt_list.append(volt_vec)
	    }
	}
	//printf("PN record(id:%d)END\n",(pc.id))
    }

    for(j = 0; j<lns.count();j+=1){
	//printf("LN record(id:%d)\n",(pc.id))
	//printf("lns.count:%d#\n",lns.count())
	if(j == 0){
	    LNvolt_vec = new Vector()			    
	    if(lns.o(j).swcid == 0){
		LNvolt_vec.record(&lns.o(j).Dend[21706].v(0.5))
	    }else if(lns.o(j).swcid == 1){
		LNvolt_vec.record(&lns.o(j).Dend[11197].v(0.5))
	    }
	    //printf("lns.o(%d).SynNumerList.size(): %d#\n",j,lns.o(j).SynNumberList.size())
	    for (i=0; i<lns.o(j).SynNumberList.size();i+=100){
		volt_vec = new Vector()
	    //for i=0, lns.o(j).SynNumberList.size()-1{
		//LNvolt_vecs[i].record(&lns.o(j).Dend[lns.o(j).SynNumberList.x[i]].v(0.5))
		volt_vec.record(&lns.o(j).Dend[lns.o(j).SynNumberList.x[i]].v(0.5))
		LNvolt_list.append(volt_vec)
	    }
	}
	//printf("LN record(id:%d)END\n",(pc.id))
    }
    //printf("RN record(id:%d)\n",(pc.id))
    for(j = 0; j<rns.count();j+=1){
	//printf("RN record(id:%d)\n",(pc.id))
	//printf("rns.count %d#\n",rns.count())
	//print "ERROR CHECK SETVOLATAGERECORD",1
	if(j==0){
	    volt_vec = new Vector()
	    //RNvolt_vecs[0].record(&rns.o(j).Dend[0].v(0.5))
	    //RNvolt_vecs[1].record(&rns.o(j).Dend[60].v(0.5))
	    //RNvolt_vecs[2].record(&rns.o(j).Dend[120].v(0.5))
	    volt_vec.record(&rns.o(j).Dend[120].v(0.5))
	    RNvolt_list.append(volt_vec)
	}
	//print "ERROR CHECK SETVOLATAGERECORD",2
    }
    //pc.barrier()
}

objref PNgaba_vecs[5000]
objref gaba_tvec
proc setGABArecord(){local i, j
    if(gabalist.count()==0){return}
    for i= 0, 5000-1{
	PNgaba_vecs[i] = new Vector()
    }
    gaba_tvec = new Vector()
    gaba_tvec.record(&t)
    
    for(j=0; j<gabalist.count();j+=1){
	PNgaba_vecs[j].record(&gabalist.o(j).pre)
    }
    //    pc.barrier()
}

objref PNdummy_vecs[5000]
objref dummy_tvec
proc setDummyRecord(){local i, j
    if(dummylist.count()==0){return}
    for i= 0, 5000-1{
	PNdummy_vecs[i] = new Vector()
    }
    dummy_tvec = new Vector()
    dummy_tvec.record(&t)
    
    for(j=0; j<dummylist.count();j+=1){
	PNdummy_vecs[j].record(&dummylist.o(j).pre)
    }
    //    pc.barrier()
}
/*
objref PreGABA_vecs[5000]
objref PreGABA_tvec
PreGABA_cnt = 0
proc setPreGABArecord(){local i,j,k localobj pre,post
    for i=0, 50-1{
	PreGABA_vecs[i] = new Vector()
    }
    PreGABA_tvec = new Vector()
    PreGABA_tvec.record(&t)
    //printf("PreGABA RECORD(pc.id:%d)\n",pc.id)
    for i = 0, NPN+NLN-1{
	if(pc.gid_exists(i)){
	    printf("PreGABA (pc.id:%d, gid:%d)\n",pc.id,i)
	    pre = pc.gid2obj(i)
	    for j=0, pre_comps_list[i].count()-1{
		for k=0, pre_comps_list[i].o(j).size()-1{	
		    PreGABA_vecs[PreGABA_cnt].record(&pre.Dend[pre_comps_list[i].o(j).x[k]].v(0.5))
		    PreGABA_cnt += 1
		}
	    }
	}
    }
}
*/
proc fprintVoltageRecord(){localobj mt, file,mt2, file2
    strdef filename
    for(j = 0; j<pns.count();j+=1){
	if(j == 0){
	    mt = new Matrix()
	    file = new File()
	    mt.resize(volt_tvec.size(),2)
	    mt.setcol(0,volt_tvec)
	    mt.setcol(1,PNvolt_vec)
	    sprint(filename,"%s%dVolt.txt",FPRINT_DIR,pns.o(j).nid)
	    file.wopen(filename)
	    mt.fprint(file,"%5.5f\t")
	    file.close()

	    file2 = new File()
	    mt2 = new Matrix()
	    //mt2.resize(volt_tvec.size(),pns.o(j).SynNumberList.size()/100+1)
	    mt2.resize(volt_tvec.size(),PNvolt_list.count()+1)
	    mt2.setcol(0,volt_tvec)
	    for(i=0; i<PNvolt_list.count();i+=1){
		mt2.setcol(i,PNvolt_list.o(i))
	    }
	    sprint(filename,"%s%dVolt_FromRN.txt",FPRINT_DIR,pns.o(j).nid)
	    file2.wopen(filename)
	    mt2.fprint(file2,"%5.5f\t")
	    file2.close()
	}
    }
    for(j = 0; j<lns.count();j+=1){
	if(j == 0){
	    mt = new Matrix()
	    file = new File()
	    mt.resize(volt_tvec.size(),2)
	    mt.setcol(0,volt_tvec)
	    mt.setcol(1,LNvolt_vec)
	    sprint(filename,"%s%dVolt.txt",FPRINT_DIR,lns.o(j).nid)
	    file.wopen(filename)
	    mt.fprint(file,"%5.5f\t")
	    file.close()

	    file2 = new File()
	    mt2 = new Matrix()
	    //mt2.resize(volt_tvec.size(),lns.o(j).SynNumberList.size()/100+1)
	    mt2.resize(volt_tvec.size(),LNvolt_list.count()+1)
	    mt2.setcol(0,volt_tvec)
	    for(i=0; i<LNvolt_list.count();i+=1){
		mt2.setcol(i,LNvolt_list.o(i))
	    }
	    sprint(filename,"%s%dVolt_FromRN.txt",FPRINT_DIR,lns.o(j).nid)
	    file2.wopen(filename)
	    mt2.fprint(file2,"%5.5f\t")
	    file2.close()
	}
    }
    for(j = 0; j<rns.count();j+=1){
	if(j==0){
	    mt = new Matrix()
	    file = new File()
	    //mt.resize(volt_tvec.size(),rns.count + 1)
	    mt.resize(volt_tvec.size(),RNvolt_list.count()+1)
	    mt.setcol(0,volt_tvec)
	    for(i=0; i<RNvolt_list.count();i+=1){
		mt2.setcol(i,RNvolt_list.o(i))
	    }
	    sprint(filename,"%s%dVolt.txt",FPRINT_DIR,rns.o(j).gid)
	    file.wopen(filename)
	    mt.fprint(file,"%5.5f\t")
	    file.close()
	}
    }
}

proc fprintGABArecord(){localobj mt, file
    if(gabalist.count()==0){return}
    strdef filename
    mt = new Matrix()
    file = new File()
    mt.resize(gaba_tvec.size(),gabalist.count()+1)
    mt.setcol(0,gaba_tvec)
    for(j = 0; j<gabalist.count();j+=1){
	mt.setcol(j+1,PNgaba_vecs[j])
    }
    sprint(filename,"%s%d_GABA.txt",FPRINT_DIR,pc.id)
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}

proc fprintDummyRecord(){localobj mt, file
    if(dummylist.count()==0){return}
    strdef filename
    mt = new Matrix()
    file = new File()
    mt.resize(dummy_tvec.size(),dummylist.count()+1)
    mt.setcol(0,dummy_tvec)
    for(j = 0; j<dummylist.count();j+=1){
	mt.setcol(j+1,PNdummy_vecs[j])
    }
    sprint(filename,"%s%d_Dummy.txt",FPRINT_DIR,pc.id)
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}
/*
proc fprintPreGABArecord(){local j localobj mt, file
    strdef filename
    if(PreGABA_cnt != 0){
	mt = new Matrix()
	file = new File()
	mt.resize(PreGABA_tvec.size(),PreGABA_cnt+1)
	mt.setcol(0,PreGABA_tvec)
	for(j = 0; j<PreGABA_cnt;j+=1){
	    mt.setcol(j+1,PreGABA_vecs[j])
	}
	sprint(filename,"%s%d_PreGABA%d.txt",FPRINT_DIR,pc.id,PreGABA_cnt)
	file.wopen(filename)
	mt.fprint(file,"%5.5f\t")
	file.close()
    }
}
*/

/*
print fprintSynapseList(){local i, j,pre_cnt, post_cnt localobj mt, file
    strdef filename
    mt = new Matrix()
    pre_cnt  = 0
    post_cnt = 0
    for(i = 0; i<NPN+NLN;i+=1){
	file = new File()
	for(j=0;j<pre_comps_list[i].count();j+=1){
	    pre_cnt = pre_comps_list[i].
	}
	mt.resize(pre_comps_list[i]
    }
}
*/