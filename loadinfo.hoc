//************************************************
// FILE NAME : main.hoc
// 2015.04.30
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
// loadinfo() : read network_info_XXX.dat file
//              and save informations with some matrix and array
//************************************************
{load_file("stdlib.hoc")}

NPN = 0
NLN = 0
NRN = 0

objref pn_matrix, ln_matrix, rn_matrix
pn_matrix = new Matrix()
ln_matrix = new Matrix()
rn_matrix = new Matrix()

objref pn_swcpath[100],pn_rotatepath[100]
for i = 0,100-1{
    pn_swcpath[i] = new String()
    pn_rotatepath[i] = new String()
}
objref ln_swcpath[500],ln_rotatepath[500]
for i = 0,500-1{
    ln_swcpath[i] = new String()
    ln_rotatepath[i] = new String()
}
objref rn_swcpath[2000],rn_rotatepath[2000]
for i = 0, 2000-1{
    rn_swcpath[i] = new String()
    rn_rotatepath[i] = new String()
}

func loadinfo(){local num_pn, num_ln, num, cellid, swcid, cloneid localobj info_fp
    strdef buf
    strdef info_filename
    strdef celltype
    strdef swcpath, rotatepath
    
    info_filename = $s1
    info_fp = new File()
    if(info_fp.ropen(info_filename) != 1){
	printf("ERROR : File was not found. (%s)\n", info_filename)
	return(-1) 
    }
    while(info_fp.scanstr(buf) != -1){
	if(strcmp("#",buf)==0){
	    continue
	}else if(strcmp("$",buf)==0){
	    info_fp.gets(buf)
	    sscanf(buf, "%s %d\n",celltype, &num)
	    if(strcmp("PN",celltype)==0){
		pn_matrix.resize(num, 3)
		print celltype," ", num
		NPN = num
		for(i=0;i<num;i=i+1){
		    info_fp.gets(buf)
		    sscanf(buf, "%d %d %d %s %s\n",&cellid, &swcid, &cloneid, swcpath, rotatepath)
		    printf("%d %d %d %s %s\n",cellid, swcid, cloneid, swcpath, rotatepath)
		    pn_matrix.x[i][0] = cellid
		    pn_matrix.x[i][1] = swcid
		    pn_matrix.x[i][2] = cloneid
		    pn_swcpath[i].s = swcpath
		    pn_rotatepath[i].s = rotatepath
		}
	    }else if(strcmp("LN",celltype)==0){
		ln_matrix.resize(num, 3)
		print celltype," ", num
		NLN = num
		for(i=0;i<num;i=i+1){
		    info_fp.gets(buf)
		    sscanf(buf, "%d %d %d %s %s\n",&cellid, &swcid, &cloneid, swcpath, rotatepath)
		    printf("%d %d %d %s %s\n",cellid, swcid, cloneid, swcpath, rotatepath)
		    ln_matrix.x[i][0] = cellid
		    ln_matrix.x[i][1] = swcid
		    ln_matrix.x[i][2] = cloneid
		    ln_swcpath[i].s = swcpath
		    ln_rotatepath[i].s = rotatepath
		}
	    }else if(strcmp("RN",celltype)==0){
		rn_matrix.resize(num, 3)
		print celltype," ", num
		NRN = num
		for(i=0;i<num;i=i+1){
		    info_fp.gets(buf)
		    sscanf(buf, "%d %d %d %s %s\n",&cellid, &swcid, &cloneid, swcpath, rotatepath)
		    printf("%d %d %d %s %s\n",cellid, swcid, cloneid, swcpath, rotatepath)
		    rn_matrix.x[i][0] = cellid
		    rn_matrix.x[i][1] = swcid
		    rn_matrix.x[i][2] = cloneid
		    rn_swcpath[i].s = swcpath
		    rn_rotatepath[i].s = rotatepath
		}
		
	    }
	}
    }
    return 0
}
//for test
//loadinfo("./cell_info/network_info_simple.dat")