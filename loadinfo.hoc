//************************************************
// FILE NAME : main.hoc
// 2015.04.30
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
// loadinfo() : read network_info_XXX.dat file
//              and save informations with some matrix and array
//
// loadSynapseInfo() 
// : read XXXsyn.dat file
//   this file include synapse informations            
//
//************************************************

{load_file("stdlib.hoc")}

NPN = 0
NLN = 0
NRN = 0

objref pn_matrix, ln_matrix, rn_matrix
pn_matrix = new Matrix()
ln_matrix = new Matrix()
rn_matrix = new Matrix()

{load_file("Path.hoc")}
objref pn_path[100], ln_path[500], rn_path[2000]

func loadinfo(){local num_pn, num_ln, num, cellid, swcid, cloneid localobj info_fp
    strdef buf
    strdef info_filename
    strdef celltype
    //swc file path, position file path, synapse file path
    strdef swcpath, ppath, synpath
    
    info_filename = $s1
    info_fp = new File()
    if(info_fp.ropen(info_filename) != 1){
	printf("ERROR : File was not found. (%s)\n", info_filename)
	return(-1) 
    }
    while(info_fp.scanstr(buf) != -1){
	if(strcmp("#",buf)==0){
	    continue
	}else if(strcmp("$",buf)==0){
	    info_fp.gets(buf)
	    sscanf(buf, "%s %d\n",celltype, &num)
	    if(strcmp("PN",celltype)==0){
		pn_matrix.resize(num, 3)
		//print celltype," ", num
		NPN = num
		for(i=0;i<num;i=i+1){
		    info_fp.gets(buf)
		    sscanf(buf, "%d %d %d %s %s %s\n",&cellid, &swcid, &cloneid, swcpath,ppath,synpath)
		    //printf("%d %d %d %s %s %s\n",cellid, swcid, cloneid, swcpath, ppath,synpath)
		    pn_matrix.x[i][0] = cellid
		    pn_matrix.x[i][1] = swcid
		    pn_matrix.x[i][2] = cloneid
		    pn_path[i] = new Path(swcpath, ppath, synpath)
		}
	    }else if(strcmp("LN",celltype)==0){
		ln_matrix.resize(num, 3)
		//print celltype," ", num
		NLN = num
		for(i=0;i<num;i=i+1){
		    info_fp.gets(buf)
		    sscanf(buf, "%d %d %d %s %s %s\n",&cellid, &swcid, &cloneid,swcpath,ppath,synpath)
		    //printf("%d %d %d %s %s %s\n",cellid, swcid, cloneid, swcpath, ppath,synpath)
		    ln_matrix.x[i][0] = cellid
		    ln_matrix.x[i][1] = swcid
		    ln_matrix.x[i][2] = cloneid
		    ln_path[i] = new Path(swcpath, ppath, synpath)
		}
	    }else if(strcmp("RN",celltype)==0){
		rn_matrix.resize(num, 3)
		//print celltype," ", num
		NRN = num
		for(i=0;i<num;i=i+1){
		    info_fp.gets(buf)
		    sscanf(buf, "%d %d %d %s %s %s\n",&cellid, &swcid, &cloneid, swcpath,ppath,synpath)
		    //printf("%d %d %d %s %s %s\n",cellid, swcid, cloneid, swcpath, ppath,synpath)
		    rn_matrix.x[i][0] = cellid
		    rn_matrix.x[i][1] = swcid
		    rn_matrix.x[i][2] = cloneid
		    rn_path[i] = new Path(swcpath, ppath, synpath)		    
		}
	    }
	}
    }
    return 0
}
{load_file("SynPath.hoc")}
func loadSynapseInfo(){local i,nid,ndata localobj syn_fp, cell, synp
    cell = $o1

    strdef buf
    strdef syn_filename
    strdef class, path
    syn_filename = cell.synpath
    
    print cell
    print cell.synpath
    syn_fp = new File()
    if(syn_fp.ropen(syn_filename) != 1){
	printf("ERROR : File was not found. (%s)\n", syn_filename)
	return(-1) 
    }
    while(syn_fp.scanstr(buf) != -1){
	if(strcmp("#",buf)==0){
	    continue
	}else if(strcmp("$",buf)==0){
	    syn_fp.gets(buf)
	    sscanf(buf, "%s\n", class)
	    if(strcmp("fromRN",class)==0){
		syn_fp.gets(buf)
		sscanf(buf, "%s\n", path)
		//print path
		//print cell.SectionNum
		//cell.mkSynapses(path)
		cell.fromRNsyn = path
	    }else if(strcmp("CtoC",class)==0){
		syn_fp.gets(buf)
		sscanf(buf, "%d\n",&ndata)
		printf("%d\n",ndata)
		for(i=0;i<ndata;i=i+1){
		    syn_fp.gets(buf)
		    sscanf(buf,"%d %s\n",&nid,synpath)
		    printf("%d %s\n",nid,synpath)
		    synp = new SynPath(nid, synpath)
		    cell.SynPathList.append(synp)
		}
	    }
	}
    }
    return 0
}
//objref c
//print "loadsynapseinfo---------------"
//loadSynapseInfo(c)
//for test
//loadinfo("./cell_info/network_info_simple.dat")