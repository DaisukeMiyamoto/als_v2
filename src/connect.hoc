//************************************************
// FILE NAME : connect.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
//
//************************************************

{load_file("loadinfo.hoc")}

NUMAXONS_PER_RN = 5
NUMSYNAPSE_PER_CELL = 400
objref rnclist
rnclist = new List()
func mkPreSynapseOnRN(){local i, gid_base, gid_cnt, save_syn_gid localobj syn, nil, nc
    gid_base = $1
    save_syn_gid =0
    //if(pc.id==0) print "(syn_gid, pc.id)"
    for i=0, rns.count()-1{
	//print i
	gid_cnt  = 0
	forsec rns.object(i).axonlist{
	    nc = new NetCon(&v(0.5),nil) 
	    nc.threshold = 1
	    syn_gid = calcSyngid(gid_base, gid_cnt, i)
	    pc.set_gid2node(syn_gid,pc.id)
	    pc.cell(syn_gid, nc)
	    rnclist.append(nc)
	    //printf("(%d, %d)\t",syn_gid, pc.id)
	    gid_cnt += 1
	    if(syn_gid>save_syn_gid){
		save_syn_gid = syn_gid
	    }
	}
    }
    printf("Max synapse gid %d\n",syn_gid)
    return save_syn_gid
}
/*
proc mkGABArecepterOnRN(){local i, gid_base localobj 
    gid_base = $1

}*/
func calcSyngid(){local base, cnt,gid,cellcnt,wholecnt,cnt2
    base = $1
    cnt  = $2//dendrite number conuter
    cnt2 = $3//cell number counter
    wholecnt = 0
    cellcnt  = 0
    for i=0, pc.id-1{
	cellcnt += CELLM.x[i][2]
    }
    gid = base + cnt*NRN + cellcnt + cnt2
    return gid
}

func calcSrcgid(){local base,syn_cnt, gid
    base =    $1
    syn_cnt = $2
    cnt  = $3
    //gid = base + syn_cnt + cnt*NRN //this equation should be changed when i make this network more bigger
    //just for the test
    
    gid = base + NUMSYNAPSE_PER_CELL*cnt + syn_cnt 
    return gid
}
objref nclist_RN
nclist_RN = new List()
proc mkPostSynapseOfRN(){local i,j,gid_base,src_gid localobj target, syn, nc
    gid_base = $1
    //print gid_base
    for i=0, NPN+NLN-1{
    //for i=NPN, NPN+NLN-1{
	if(pc.gid_exists(GID_VEC.x[i])){
	    target = pc.gid2obj(GID_VEC.x[i])
	    loadSynapseInfo(target, target.synpath, 1)
	    target.mkSynapses(target.fromRNsyn)
	    //printf("loadsynapseinfo()(pc.id : %d)\n",pc.id)
	    for j=0, target.synlist.count()-1{
		syn = target.synlist.o(j)
		src_gid = calcSrcgid(gid_base, j, i)
		//print "src_gid ", src_gid
		nc  = pc.gid_connect(src_gid, syn)
		nc.delay  = 1.0
		if(target.cellid == 2){
		    //print "nc.weight for 200 ",WEIGHT_200
		    nc.weight = WEIGHT_200
		}else if(target.cellid == 3 && target.swcid == 1){
		    //print "nc.weight for 301 ",WEIGHT_301
		    nc.weight = WEIGHT_301
		}else if(target.cellid == 3 && target.swcid == 0){
		    //print "nc.weight for 300 ",WEIGHT_300
		    nc.weight = WEIGHT_300
		}else{
		    //print "nc.weight ** ERROR **"
		}
		nclist_RN.append(nc)
	    }
	}
    }
}
proc connectRNtoOthers(){\
    local gid_base, syn_gid,syn_gid_max
    printf("connectRNtoOthers[%d]\n",pc.id)
    gid_base = 1000000
    syn_gid  = mkPreSynapseOnRN(gid_base)
    //printf("Before allreduce gid_max:%d pc.id:%d\n",syn_gid,pc.id)
    syn_gid_max = pc.allreduce(syn_gid,2)
    //printf("After allreduce  gid_max:%d pc.id:%d\n",syn_gid_max,pc.id)
    pc.barrier()
    mkPostSynapseOfRN(gid_base)
    pc.barrier()
}

/*
proc setSynapseInfo(){\
    local i\
    localobj cell
    for i=0, NPN+NLN-1{
	if(pc.gid_exists(i)){
	    cell = pc.gid2obj(i)
	    loadSynapseInfo(cell)
	}
    }
}
*/

_pre_nid  = 0
_post_nid = 0
_pre_comp = 0
_post_comp = 0
/*
objref pre_comps_list[100], post_comps_list[100]
for i=0,100-1{
    pre_comps_list[i]  = new List()
    post_comps_list[i] = new List()
}*/
objref pre_comps,post_comps
objref syntypes//types 1 inhibition 2 excitation, synapse type
objref gidVec
proc readSynapseList(){\
    local nid, nconnect, i,gid_base\
    localobj synf,strobj,pre,post,nc,nil,syn, SynPathList_

    strdef buf, ctype
    strdef syn_filename
    
    pre_comps = new Vector()
    post_comps = new Vector()
    syntypes = new Vector()
    gidVec = new Vector()
    SynPathList_ = $o1
    syn_filename = SynPathList_.synpath
    gid_base = $2
    gid_cnt  = 0

    synf = new File()
    
    if(synf.ropen(syn_filename) != 1){
	printf("ERROR : File was not found. (%s)\n",syn_filename)
	return(-1) 
    }

    while(synf.scanstr(buf)!=-1){
	if(strcmp("#",buf)==0){
	    continue
	}else if(strcmp("$",buf)==0){
	    synf.gets(buf)
	    sscanf(buf,"%s %d\n",ctype,&nid)
	    if(strcmp("PRE_CELL",ctype)==0){
		_pre_nid  = nid
	    }else if(strcmp("POST_CELL",ctype)==0){
		_post_nid = nid
	    }else if(strcmp("NCONNECTIONS",ctype)==0){
		nconnect = nid
		for(i=0;i<nconnect;i+=1){
		    synf.gets(buf)
		    sscanf(buf,"%d %d\n",&_pre_comp, &_post_comp)
		    printf("%d %d\n",_pre_comp, _post_comp)
		    pre_comps.append(_pre_comp)
		    post_comps.append(_post_comp)
		    gidVec.append(gid_base+gid_cnt)
		    if(int(SynPathList_.postgid/100000)==3){
			print _pre_nid, _pre_comp, _post_nid,_post_comp,"Inhibition"
			syntypes.append(1)
		    }else if(int(SynPathList_.postgid/100000)==2){
			print _pre_nid, _pre_comp, _post_nid,_post_comp,"Excitation"
			syntypes.append(2)
		    }else{
			print _pre_nid
			print "SOMETHINGS WRONG IN READ SYNAPSE LIST"
			return (-1)
		    }
		    gid_cnt += 1
		}
	    }
	}
    }
    //pre_comps_list[SynPathList_.pregid].append(pre_comps)
    //post_comps_list[SynPathList_.postgid].append(post_comps)
}

objref nclist_NtoN
nclist_NtoN = new List()
proc makePreSynapse(){local i, pre_cell, gid localobj pre,nc,nil
    pre_cell = $1
    if(pc.gid_exists(pre_cell)){
	pre = pc.gid2obj(pre_cell)
	print "SectionNum ", pre.SectionNum
	for i=0, pre_comps.size()-1{
	    nc = pre.connect2target(pre_comps.x[i],nil)
	    pc.set_gid2node(gidVec.x[i],pc.id)
	    pc.cell(gidVec.x[i],nc)
	    nclist_NtoN.append(nc)
	}
    }
}

proc makePostSynapse(){local i, post_cell,rev_potential, delay, weight,gid localobj post,nc,syn
    post_cell = $1
    delay  = $2
    weight = $3
    
    if(pc.gid_exists(post_cell)){
	post = pc.gid2obj(post_cell)
	for i=0, post_comps.size()-1{
	    if(syntypes.x[i]==1){
		rev_potential = -75
	    }else if(syntypes.x[i]==2){
		rev_potential = 0
	    }else{
		print "makePostSynapse : Type error"
		return
	    }
	    syn = post.mkSyn(post_comps.x[i],rev_potential)
	    nc = pc.gid_connect(gidVec.x[i], syn)
	    nc.delay = delay
	    nc.weight = weight
	    nclist_NtoN.append(nc)
	}
    }
}

objref gabalist, dummylist
gabalist  = new List()
dummylist = new List()

proc makePostSynapse_NET_GABA(){local i, post_cell, delay, weight,gmax,gid localobj post,nc,gaba
    post_cell = $1
    delay  = $2
    weight = $3
    gmax   = $4
    if(pc.gid_exists(post_cell)){
	post = pc.gid2obj(post_cell)
	for i=0, post_comps.size()-1{
	    gaba = post.mkNET_GABA(post_comps.x[i],gmax)
	    gabalist.append(gaba)
	    nc = pc.gid_connect(gidVec.x[i], gaba)
	    nc.delay = delay
	    nc.weight = weight
	    nclist_NtoN.append(nc)
	}
    }
}
proc makePRL_GABAsynapse(){local gid_base,gid,pre_cell,post_cell,gmax,delay localobj pre_gaba, post_gaba, pre, post
    pre_cell  = $1
    post_cell = $2
    gid_base  = $3
    gmax      = $4
    delay     = $5
    
    //printf("Pre: %d\tPost: %d\tGid_base :%d\tGamx :%d\n",pre_cell,post_cell,gid_base,gmax)
    if(pc.gid_exists(pre_cell)){
	pre = pc.gid2obj(pre_cell)
	//print "Pre SectionNum ", pre.SectionNum
	//printf("pre_comps.size() : %d (pc.id:%d)\n",pre_comps.size(),pc.id)
	for i=0, pre_comps.size()-1{
	    pre_gaba = pre.mkPRL_GABA(pre_comps.x[i],0)
	    dummylist.append(pre_gaba)
	    gid = gid_base+(gidVec.x[i]-gidVec.x[0])*2
	    //print gid
	    pc.target_var(&pre_gaba.dummy,gid)//dummy
	    pc.source_var(&pre.Dend[pre_comps.x[i]].v(0.5),gid+1) //for real gaba
	}
    }
    if(pc.gid_exists(post_cell)){
	post = pc.gid2obj(post_cell)
	//print "Post SectionNum ", post.SectionNum
	//printf("post_comps.size() : %d (pc.id:%d)\n",pre_comps.size(),pc.id)
	for i=0, post_comps.size()-1{
	    post_gaba = post.mkPRL_GABA(post_comps.x[i],gmax)
	    gabalist.append(post_gaba)
	    gid = gid_base+(gidVec.x[i]-gidVec.x[0])*2
	    //print gid
	    pc.target_var(&post_gaba.pre,gid+1)
	    pc.source_var(&post.Dend[post_comps.x[i]].v(0.5),gid) //for dummy
	}
    }
}

//----------------------------------------------------
// Connect Neurons to Neurons
// for example ln to ln, ln to pn
proc connectNtoN(){\
    local i, j,gid_base\
    localobj str,nil,pre,post
    printf("connectNtoN[%d]\n",pc.id)
    strdef _syn_path
    gid_base = 2000000

    for(i=0;i<NPN;i=i+1){
	//print "error pn"
	loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
	//print "error ln"
	loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    for(j=0;j<SynPathList.count();j+=1){
	print SynPathList.o(j).synpath
	readSynapseList(SynPathList.o(j),gid_base)
	pc.barrier()
	makePreSynapse(SynPathList.o(j).pregid)
	pc.barrier()
	makePostSynapse(SynPathList.o(j).postgid,30,0.2)
	if(pre_comps.size() == post_comps.size()){
	    gid_base += pre_comps.size()
	}else{
	    print "ERROR IN CONNECTNTON"
	    return (-1)
	}
   }
}

//----------------------------------------------------
// Connect Neurons to Neurons
// for example ln to ln, ln to pn
proc connectNtoN_NET_GABA(){\
    local i, j,gid_base\
    localobj str,nil,pre,post

    strdef _syn_path
    gid_base = 2000000
    printf("connectNtoN_NET_GABA[%d]\n",pc.id)
    for(i=0;i<NPN;i=i+1){
	//print "error pn"
	loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
	//print "error ln"
	loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    for(j=0;j<SynPathList.count();j+=1){
	print "SynPathList ",j,SynPathList.o(j).synpath, SynPathList.o(j).pregid, SynPathList.o(j).postgid
	readSynapseList(SynPathList.o(j),gid_base)
	makePreSynapse(SynPathList.o(j).pregid)
	pc.barrier()
	if(int(SynPathList.o(j).postgid/100000)==2){//If post-synaptic neuron is PN
	    printf("POST SYNAPSE IS PN(pc.id:%d)\n",pc.id)
	    makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,GMAX_LTOP/NLN)
	    //makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,5.0)
	}else{
	    printf("POST SYNAPSE IS LN(pc.id:%d)\n",pc.id)
	    makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,GMAX_LTOL/NLN)
	}

	if(pre_comps.size() == post_comps.size()){
	    gid_base += pre_comps.size()
	}else{
	    print "ERROR IN CONNECTNTON"
	    return (-1)
	}
   }
}

func connectNtoN_GABA(){\
    local i, j,gid_base\
    localobj str,nil,pre,post

    strdef _syn_path
    gid_base = 2000000
    print "Connect Neuron to Neuron with GABAergic synapse(PRL_GABA)"
    for(i=0;i<NPN;i=i+1){
	//print "error pn"
	//print pn_path[i].synpath
	loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
	//print "error ln"
	//print ln_path[i].synpath
	loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    /*
    for(j=0;j<SynPathList.count();j+=1){
	SynPathList.o(j).write()
    }
    */
    for(j=0;j<SynPathList.count();j+=1){
	
	print "SynPathList ",j,SynPathList.o(j).synpath, SynPathList.o(j).pregid, SynPathList.o(j).postgid
	readSynapseList(SynPathList.o(j),gid_base)
	if(int(SynPathList.o(j).postgid/100000)==2){//If post-synaptic neuron is PN
	    printf("POST SYNAPSE IS PN(pc.id:%d)\n",pc.id)
	    makePRL_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,gid_base,GMAX_LTOP/NLN,0)
	}else{
	    printf("POST SYNAPSE IS LN(pc.id:%d)\n",pc.id)
	    makePRL_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,gid_base,GMAX_LTOL/NLN,0)
	}
	
	pc.barrier()
	if(pre_comps.size() == post_comps.size()){
	    gid_base += pre_comps.size()*2
	}else{
	    print "ERROR IN CONNECTNTON"
	    return (-1)
	}
    }
    return gid_base
}

proc connectNtoN_DUMMY(){\
    local i, j, gid_base,pre_gid, post_gid\
    localobj pre_dummy, post_dummy
    //printf("connectNtoN_DUMMY[%d]\n",pc.id)
    gid_base = $1
    if(pc.id==0){printf("pc.id\tpre_t\tpre_s\tpost_t\tpost_s\n")}
    if(pns.count()==0 && lns.count()==0){
	pre_dummy = rns.o(0).mkDUMMY(0)
	dummylist.append(pre_dummy)
	pre_gid = gid_base + (pc.id-NPN-NLN)%(pc.nhost-NPN-NLN)*2
	pc.target_var(&pre_dummy.dummy,pre_gid)
	pc.source_var(&rns.o(0).Dend[0].v(0.5),pre_gid+1)

	post_dummy = rns.o(0).mkDUMMY(1)
	dummylist.append(post_dummy)
	post_gid = gid_base + (pc.id+1-NPN-NLN)%(pc.nhost-NPN-NLN)*2
	pc.source_var(&rns.o(0).Dend[1].v(0.5),post_gid)
	pc.target_var(&post_dummy.dummy,post_gid+1)
	printf("%d\t%d\t%d\t%d\t%d\n",pc.id,pre_gid,pre_gid+1,post_gid+1,post_gid)
    }
}