//************************************************
// FILE NAME : connect.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
//
//************************************************

{load_file("loadinfo.hoc")}
{load_file("stim.hoc")}

NUMSYNAPSE_PER_CELL = 400
objref rnclist
rnclist = new List()
func mkPreSynapseOnRN(){local i, gid_base, gid_cnt, save_syn_gid localobj syn, nil, nc
    gid_base = $1
    save_syn_gid =0
    //if(pc.id==0) print "(syn_gid, pc.id)"
    for i=0, rns.count()-1{
    //print i
    gid_cnt  = 0
    forsec rns.object(i).axonlist{
        nc = new NetCon(&v(0.5),nil) 
        nc.threshold = 1
        syn_gid = calcSyngid(gid_base, gid_cnt, i)
        pc.set_gid2node(syn_gid,pc.id)
        pc.cell(syn_gid, nc)
        rnclist.append(nc)
        //printf("(%d, %d)\t",syn_gid, pc.id)
        gid_cnt += 1
        if(syn_gid>save_syn_gid){
        save_syn_gid = syn_gid
        }
    }
    }
    printf("Max synapse gid %d [%d]\n",syn_gid,pc.id)
    return save_syn_gid
}

func calcSyngid(){local base, axon_id, cell_id, cell_cnt, gid //Calculate Synapse GID: calculate gid of presynapse
    base = $1
    axon_id  = $2 //dendrite number
    cell_id = $3 //cell number
    cell_cnt  = 0
    for i=0, pc.id-1{
    cell_cnt += CELLM.x[i][2]
    }
    gid = base + axon_id * NRN + cell_cnt + cell_id
    return gid
}

func calcSrcgid(){local base, syn_id, target_id, modular, gid //Calculate Source GID: calculate which presynapse to connect
    base = $1
    syn_id = $2
    target_id = $3
    modular = $4 - base
    gid = base + ((NUMSYNAPSE_PER_CELL * target_id + syn_id) % modular)
    return gid
}

objref nclist_RN
nclist_RN = new List()
proc mkPostSynapseOfRN(){local i,j,gid_base,src_gid localobj target, syn, nc
    gid_base = $1
    syn_gid_max = $2
    //print gid_base
    for i=0, NPN+NLN-1{
    //for i=NPN, NPN+NLN-1{
    if(pc.gid_exists(GID_VEC.x[i])){
        target = pc.gid2obj(GID_VEC.x[i])
        loadSynapseInfo(target, target.synpath, 1)
        target.mkSynapses(target.fromRNsyn, 0)
        //printf("loadsynapseinfo()(pc.id : %d)\n",pc.id)
        printf("target.synlist.count() : %d [%d]\n",target.synlist.count(),pc.id)
        for j=0, target.synlist.count()-1{
        syn = target.synlist.o(j)
        src_gid = calcSrcgid(gid_base, j, i, syn_gid_max)
        //print "src_gid ", src_gid
        nc  = pc.gid_connect(src_gid, syn)
        nc.delay  = 1.0
        if(target.cellid == 2){
            //print "nc.weight for 200 ",WEIGHT_200
            nc.weight = WEIGHT_200
        }else if(target.cellid == 3 && target.swcid == 0){
            //print "nc.weight for 300 ",WEIGHT_300
            nc.weight = WEIGHT_300
        }else if(target.cellid == 3 && target.swcid == 1){
            //print "nc.weight for 301 ",WEIGHT_301
            nc.weight = WEIGHT_301
        }else if(target.cellid == 3 && target.swcid == 2){
            print "nc.weight for 302 ",WEIGHT_300
            nc.weight = WEIGHT_300
        }else if(target.cellid == 3 && target.swcid == 3){
            print "nc.weight for 303 ",WEIGHT_301
            nc.weight = WEIGHT_301
        }else{
            print "nc.weight ** ERROR **"
        }
        nclist_RN.append(nc)
        }
        printf("src_gid : %d i: %d j: %d [%d]\n",src_gid,i,j,pc.id)
    }
    }
}
proc connectRNtoOthers(){\
    local gid_base, syn_gid,syn_gid_max
    printf("connectRNtoOthers[%d]\n",pc.id)
    gid_base = 1000000
    syn_gid  = mkPreSynapseOnRN(gid_base)
    //printf("Before allreduce gid_max:%d pc.id:%d\n",syn_gid,pc.id)
    syn_gid_max = pc.allreduce(syn_gid,2)
    //printf("After allreduce  gid_max:%d pc.id:%d\n",syn_gid_max,pc.id)
    pc.barrier()
    mkPostSynapseOfRN(gid_base, syn_gid_max)
    pc.barrier()
}

obfunc setVecStim(){localobj vs, spvec
    spvec = $o1
    vs = new VecStim(0.025)
    vs.play(spvec)
    return vs
}

objref spvecs, vses, ncs, synlyst


proc connectVecStimFromMRN(){ local i, j, dose, nstim localobj rnd, target, post_syn, spvec, vs, nc
    if(pc.id == 0){
        printf("connectVecStimFromMRN()\n")
    }

    strdef _SPT_DIR_
    strdef _SPT_NAME_

    spvecs = new List()
    vses = new List()
    ncs = new List()
    synlyst = new List()

    _SPT_DIR_ = $s1
    print _SPT_DIR_
    dose = $2
    nstim= $3

    RND_SEED = START_TIME
    rnd = new Random(RND_SEED+pc.id)
    rnd.uniform(0,1000)

    for i=0, NPN+NLN-1{
        if(pc.gid_exists(GID_VEC.x[i])){
            target = pc.gid2obj(GID_VEC.x[i])
            loadSynapseInfo(target, target.synpath, 1)
            target.mkSynapses(target.fromMRNsyn, 1)
            printf("target.synlist_fromMRN.count() : %d [%d]\n",target.synlist_fromMRN.count(),pc.id)
  
            for j=0, target.synlist_fromMRN.count()-1{
                post_syn = target.synlist_fromMRN.o(j)
                sprint(_SPT_NAME_, "%sspt%03d.dat", _SPT_DIR_, int(rnd.repick()))
                spvec = readSpikeTiming(_SPT_NAME_)

                vs    = setVecStim(spvec)
                nc = target.connectVecStim(vs, post_syn)

                spvecs.append(spvec)
                vses.append(vs)
                ncs.append(nc)
                synlyst.append(post_syn)
            }
//            printf("src_gid : %d i: %d j: %d [%d]\n",src_gid,i,j,pc.id)
        }
    }
}


objref NC_CMPT_VECS, NC_GID_VECS
NC_CMPT_VECS = new List()
NC_GID_VECS  = new List()

func set_netcon_gid(){\
    local nid, cmpt, gid, i, j\
    localobj nc_cmpt_vec, nc_gid_vec
    nid  = $1
    cmpt = $2
    gid  = $3

    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        for j=1, NC_CMPT_VECS.o(i).size()-1{
        if(cmpt == NC_CMPT_VECS.o(i).x[j]){
            printf("nid and cmpt already exist\n")
            return -1
        }
        }
        NC_CMPT_VECS.o(i).append(cmpt)
        NC_GID_VECS.o(i).append(gid)
        return 1
    }
    }
    nc_cmpt_vec = new Vector()
    nc_cmpt_vec.append(nid,cmpt)
    NC_CMPT_VECS.append(nc_cmpt_vec)
    nc_gid_vec = new Vector()
    nc_gid_vec.append(nid,gid)
    NC_GID_VECS.append(nc_gid_vec)
    return 1
}

func get_netcon_gid(){\
    local nid, cmpt, gid, i, j
    nid  = $1
    cmpt = $2
    gid  = $3

    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        for j=1, NC_CMPT_VECS.o(i).size()-1{
        if(cmpt == NC_CMPT_VECS.o(i).x[j]){
            gid = NC_GID_VECS.o(i).x[j]
            return gid
        }
        }
    }
    }
    return -1
}

proc print_netcon_gid(){
    for i=0, NC_CMPT_VECS.count()-1{
    printf("NID : %d",NC_CMPT_VECS.o(i).x[0])
    for j=1, NC_CMPT_VECS.o(i).size()-1{
        printf("%d\t%d\n",NC_CMPT_VECS.o(i).x[j],NC_GID_VECS.o(i).x[j])
    }
    }
}

func netcon_gid_exists(){\
    local nid, gid, i, j
    nid  = $1
    gid = $2

    for i=0, NC_GID_VECS.count()-1{
    if(nid == NC_GID_VECS.o(i).x[0]){
        for j=1, NC_GID_VECS.o(i).size()-1{
        if(gid == NC_GID_VECS.o(i).x[j]){
            printf("netcon_exists(%d, %d) is TRUE\n",nid,gid)
            return 1
        }
        }
    }
    }
    return 0
}

func netcon_cmpt_exists(){\
    local nid, cmpt, i, j
    nid  = $1
    cmpt = $2

    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        for j=1, NC_CMPT_VECS.o(i).size()-1{
        if(cmpt == NC_CMPT_VECS.o(i).x[j]){
            printf("netcon_cmpt_exists(%d, %d) is TRUE\n",nid,cmpt)
            return 1
        }
        }
    }
    }
    return 0
}

func netcon_nid_exists(){\
    local nid, i, j
    nid  = $1
    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        printf("netcon_nid_exists(%d, %d, %d) is TRUE\n",nid)
        return 1
    }
    }
    return 0
}



_pre_nid  = 0
_post_nid = 0
_pre_comp = 0
_post_comp = 0
_gid      = 0

/*
objref pre_comps_list[100], post_comps_list[100]
for i=0,100-1{
    pre_comps_list[i]  = new List()
    post_comps_list[i] = new List()
}*/
objref pre_comps,post_comps
objref syntypes//types 1 inhibition 2 excitation, synapse type
objref gidVec
/*
proc readSynapseList(){\
    local nid, nconnect, i,gid_base\
    localobj synf,strobj,pre,post,nc,nil,syn, SynPathList_

    strdef buf, ctype
    strdef syn_filename
    
    pre_comps = new Vector()
    post_comps = new Vector()
    syntypes = new Vector()
    gidVec = new Vector()
    SynPathList_ = $o1
    syn_filename = SynPathList_.synpath
    gid_base = $2
    gid_cnt  = 0

    synf = new File()
    
    if(synf.ropen(syn_filename) != 1){
    printf("ERROR : File was not found. (%s)\n",syn_filename)
    return(-1) 
    }

    while(synf.scanstr(buf)!=-1){
    if(strcmp("#",buf)==0){
        continue
    }else if(strcmp("$",buf)==0){
        synf.gets(buf)
        sscanf(buf,"%s %d\n",ctype,&nid)
        if(strcmp("PRE_CELL",ctype)==0){
        _pre_nid  = nid
        }else if(strcmp("POST_CELL",ctype)==0){
        _post_nid = nid
        }else if(strcmp("NCONNECTIONS",ctype)==0){
        nconnect = nid
        for(i=0;i<nconnect;i+=1){
            synf.gets(buf)
            sscanf(buf,"%d %d\n",&_pre_comp, &_post_comp)
            //printf("%d %d\n",_pre_comp, _post_comp)
            pre_comps.append(_pre_comp)
            post_comps.append(_post_comp)
            gidVec.append(gid_base+gid_cnt)
            if(int(SynPathList_.postgid/100000)==3){
            //print _pre_nid, _pre_comp, _post_nid,_post_comp,"Inhibition"
            syntypes.append(1)
            }else if(int(SynPathList_.postgid/100000)==2){
            //print _pre_nid, _pre_comp, _post_nid,_post_comp,"Excitation"
            syntypes.append(2)
            }else{
            print _pre_nid
            print "SOMETHINGS WRONG IN READ SYNAPSE LIST"
            return (-1)
            }
            gid_cnt += 1
        }
        }
    }
    }
    //pre_comps_list[SynPathList_.pregid].append(pre_comps)
    //post_comps_list[SynPathList_.postgid].append(post_comps)
}
*/
proc readSynapseList2(){\
    local nid, nconnect, i,gid_base\
    localobj synf,strobj,pre,post,nc,nil,syn, SynPathList_

    strdef buf, ctype
    strdef syn_filename
    
    pre_comps = new Vector()
    post_comps = new Vector()
    syntypes = new Vector()
    gidVec = new Vector()
    SynPathList_ = $o1
    syn_filename = SynPathList_.synpath
    gid_cnt  = 0
    
    synf = new File()
    
    if(synf.ropen(syn_filename) != 1){
    printf("ERROR : File was not found. (%s)\n",syn_filename)
    return(-1) 
    }

    while(synf.scanstr(buf)!=-1){
    if(strcmp("#",buf)==0){
        continue
    }else if(strcmp("$",buf)==0){
        synf.gets(buf)
        sscanf(buf,"%s %d\n",ctype,&nid)
        if(strcmp("PRE_CELL",ctype)==0){
        _pre_nid  = nid
        }else if(strcmp("POST_CELL",ctype)==0){
        _post_nid = nid
        }else if(strcmp("NCONNECTIONS",ctype)==0){
        nconnect = nid
        for(i=0;i<nconnect;i+=1){
            synf.gets(buf)
            sscanf(buf,"%d %d %d\n",&_pre_comp, &_post_comp, &_gid)
            //printf("%d %d\n",_pre_comp, _post_comp)
            pre_comps.append(_pre_comp)
            post_comps.append(_post_comp)
            //gidVec.append(gid_base+gid_cnt)
            gidVec.append(_gid)
            if(int(SynPathList_.postgid/100000)==3){
            //print _pre_nid, _pre_comp, _post_nid,_post_comp,"Inhibition"
            syntypes.append(1)
            }else if(int(SynPathList_.postgid/100000)==2){
            //print _pre_nid, _pre_comp, _post_nid,_post_comp,"Excitation"
            syntypes.append(2)
            }else{
            print _pre_nid
            print "SOMETHINGS WRONG IN READ SYNAPSE LIST"
            return (-1)
            }
            gid_cnt += 1
        }
        }
    }
    }
    //pre_comps_list[SynPathList_.pregid].append(pre_comps)
    //post_comps_list[SynPathList_.postgid].append(post_comps)
}


objref nclist_NtoN
nclist_NtoN = new List()
proc makePreSynapse(){local i, pre_cell, gid localobj pre,nc,nil
    pre_cell = $1
    if(pc.gid_exists(pre_cell)){
    pre = pc.gid2obj(pre_cell)
    print "SectionNum ", pre.SectionNum
    for i=0, pre_comps.size()-1{
        nc = pre.connect2target(pre_comps.x[i],nil)
        pc.set_gid2node(gidVec.x[i],pc.id)
        pc.cell(gidVec.x[i],nc)
        nclist_NtoN.append(nc)
    }
    }
}

proc makePostSynapse(){local i, post_cell,rev_potential, delay, weight,gid localobj post,nc,syn
    post_cell = $1
    delay  = $2
    weight = $3
    
    if(pc.gid_exists(post_cell)){
    post = pc.gid2obj(post_cell)
    for i=0, post_comps.size()-1{
        if(syntypes.x[i]==1){
        rev_potential = -75
        }else if(syntypes.x[i]==2){
        rev_potential = 0
        }else{
        print "makePostSynapse : Type error"
        return
        }
        syn = post.mkSyn(post_comps.x[i],rev_potential)
        nc = pc.gid_connect(gidVec.x[i], syn)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)
    }
    }
}

objref gabalist, dummylist
gabalist  = new List()
dummylist = new List()

proc makePostSynapse_NET_GABA(){local i, post_cell, delay, weight,gmax,gid localobj post,nc,gaba
    post_cell = $1
    delay  = $2
    weight = $3
    gmax   = $4
    printf("makePostSynapse_NET_GABA() (pc.id:%d)\n",pc.id)
    if(pc.gid_exists(post_cell)){
    post = pc.gid2obj(post_cell)
    for i=0, post_comps.size()-1{
        if(GABAA_ON == 1){
        gaba = post.mkNET_GABAa(post_comps.x[i],gmax)
        }else if(GABAB_ON == 1){
        gaba = post.mkNET_GABAb(post_comps.x[i],gmax)
        }
        gabalist.append(gaba)
        nc = pc.gid_connect(gidVec.x[i], gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)
    }
    }
}

//Post Synapse Voltage
objref psv_tvec
objref psv_vecs
psv_vecs = new List()
proc setPostSynapseVoltageRecord(){local cmpt localobj vec, cell
    cell = $o1
    cmpt = $2
    vec = new Vector()
    vec.record(&cell.Dend[cmpt].v(0.5))
    psv_vecs.append(vec)
}

proc setPostSynapseVoltageRecord_t(){
    psv_tvec = new Vector()
    psv_tvec.record(&t)
}

proc fprintPostSynapseVoltageRecord(){localobj mt, file
    if(psv_vecs.count()==0){return}
    strdef filename, fprint_dir
    fprint_dir = $s1
    mt = new Matrix()
    file = new File()
    mt.resize(psv_tvec.size(),psv_vecs.count()+1)
    mt.setcol(0,psv_tvec)
    for(j = 0; j<psv_vecs.count();j+=1){
    mt.setcol(j+1,psv_vecs.o(j))
    }
    sprint(filename,"%s%d_PSV.txt",fprint_dir,pc.id)
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}


proc makeNET_GABAsynapse(){local pre_cell, post_cell, gmax_a,gmax_b, delay, weight, point localobj gaba, pre, post, nc, nil
    pre_cell=$1
    post_cell=$2
    delay=$3
    weight=$4
    gmax_a=$5
    gmax_b=$6

    if(pc.gid_exists(pre_cell)){
    pre = pc.gid2obj(pre_cell)
    for i=0, pre_comps.size()-1{
        if(!pc.gid_exists(gidVec.x[i])){
        point = (pc.id)/(NLN+NPN)
        //printf("PRE : %d, GID : %d, i : %d, point : %f [%d]\n",pre_cell,gidVec.x[i],i,point,pc.id)
        pre.Dend[pre_comps.x[i]] nc = new NetCon(&v(point),nil)
        //nc = pre.connect2target(pre_comps.x[i],nil)
        nc.threshold = 1
        pc.set_gid2node(gidVec.x[i],pc.id)
        pc.cell(gidVec.x[i],nc)
        nclist_NtoN.append(nc)
        /*
        pre.Dend[pre_comps.x[i]]{
            psection()
        }
        */
        }
    }
    }

    if(pc.gid_exists(post_cell)){
        post = pc.gid2obj(post_cell)
        for i=0, post_comps.size()-1{
        //printf("POST: %d, GID : %d, i : %d, [%d]\n",post_cell,gidVec.x[i],i,pc.id)
            if(GABAA_ON == 1){
                gaba = post.mkNET_GABAa(post_comps.x[i],gmax_a)
        gabalist.append(gaba)
        nc = pc.gid_connect(gidVec.x[i], gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)
            }
        if(GABAB_ON == 1){
                gaba = post.mkNET_GABAb(post_comps.x[i],gmax_b)
        gabalist.append(gaba)
        nc = pc.gid_connect(gidVec.x[i], gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)
            }
        //setPostSynapseVoltageRecord(post, post_comps.x[i])
    }
    }
}

proc makeNET_GABAsynapse2(){local pre_cell, post_cell, gmax, delay, weight, point localobj gaba, pre, post, nc, nil, prelist
    pre_cell=$1
    post_cell=$2
    cnt =$3
    cnt2 = $4
    cnt3 = $5
    printf("cnt : %d ",cnt)
    /*
    pre_cell= 301000
    post_cell= 200000
    */
    delay=1
    weight=1
    gmax=0.3
    
    
    prelist = new List()
    printf("pre_cell\t%d, post_cell\t%d\n",pre_cell,post_cell)

    if(pc.gid_exists(post_cell)){
        post = pc.gid2obj(post_cell)
    printf("pc.gid_exists(%d)\n",post_cell)
    print post
        gaba = post.mkNET_GABAa(150,gmax)
        gabalist.append(gaba)
        nc = pc.gid_connect(2000000+cnt, gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)

        gaba = post.mkNET_GABAa(250,gmax)
        gabalist.append(gaba)
        nc = pc.gid_connect(2000001+cnt, gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)

        gaba = post.mkNET_GABAa(350,gmax)
        gabalist.append(gaba)
        nc = pc.gid_connect(2000002+cnt, gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)

        gaba = post.mkNET_GABAa(450,gmax)
        gabalist.append(gaba)
        nc = pc.gid_connect(2000003+cnt, gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)

        gaba = post.mkNET_GABAa(550,gmax)
        gabalist.append(gaba)
        nc = pc.gid_connect(2000004+cnt, gaba)
        nc.delay = delay
        nc.weight = weight
        nclist_NtoN.append(nc)
    }
    

    if(pc.gid_exists(pre_cell)){
    pre = pc.gid2obj(pre_cell)
    //point = pc.id/(NPN+NLN)
    point = (cnt3+1)/10.0
    printf("pc.gid_exists(%d), point : %f\n",pre_cell,point)
    print pre
    if(!pc.gid_exists(2000000+cnt)){
        nc = pre.connect2target(1100+cnt2,nil,point)
        nc.threshold = 1
        pc.set_gid2node(2000000+cnt,pc.id)
        pc.cell(2000000+cnt,nc)
        nclist_NtoN.append(nc)
    }

    if(!pc.gid_exists(2000001+cnt)){
        nc = pre.connect2target(2200+cnt2,nil,point)
        nc.threshold = 1
        pc.set_gid2node(2000001+cnt,pc.id)
        pc.cell(2000001+cnt,nc)
        nclist_NtoN.append(nc)
    }

    if(!pc.gid_exists(2000002+cnt)){
        nc = pre.connect2target(3300+cnt2,nil,point)
        nc.threshold = 1
        pc.set_gid2node(2000002+cnt,pc.id)
        pc.cell(2000002+cnt,nc)
        nclist_NtoN.append(nc)
    }

    if(!pc.gid_exists(2000003+cnt)){
        nc = pre.connect2target(4400+cnt2,nil,point)
        nc.threshold = 1
        pc.set_gid2node(2000003+cnt,pc.id)
        pc.cell(2000003+cnt,nc)
        nclist_NtoN.append(nc)
    }   

    if(!pc.gid_exists(2000004+cnt)){
        nc = pre.connect2target(5500+cnt2,nil,point)
        nc.threshold = 1
        pc.set_gid2node(2000004+cnt,pc.id)
        pc.cell(2000004+cnt,nc)
        nclist_NtoN.append(nc)
    }
    /*
    prelist = nc.prelist()
    print "prelist ",prelist
    printf("prelist.count() :%d[%d]\n",prelist.count(),pc.id)
    */
    }

}


proc makePRL_GABAsynapse(){local gid_base,gid,pre_cell,post_cell,gmax,delay localobj pre_gaba, post_gaba, pre, post
    pre_cell  = $1
    post_cell = $2
    gid_base  = $3
    gmax      = $4
    delay     = $5
    
    //printf("Pre: %d\tPost: %d\tGid_base :%d\tGamx :%d\n",pre_cell,post_cell,gid_base,gmax)
    if(pc.gid_exists(pre_cell)){
    pre = pc.gid2obj(pre_cell)
    //print "Pre SectionNum ", pre.SectionNum
    //printf("pre_comps.size() : %d (pc.id:%d)\n",pre_comps.size(),pc.id)
    for i=0, pre_comps.size()-1{
        pre_gaba = pre.mkPRL_GABA(pre_comps.x[i],0)
        dummylist.append(pre_gaba)
        gid = gid_base+(gidVec.x[i]-gidVec.x[0])*2
        //print gid
        pc.target_var(&pre_gaba.dummy,gid)//dummy
        pc.source_var(&pre.Dend[pre_comps.x[i]].v(0.5),gid+1) //for real gaba
    }
    }
    if(pc.gid_exists(post_cell)){
    post = pc.gid2obj(post_cell)
    //print "Post SectionNum ", post.SectionNum
    //printf("post_comps.size() : %d (pc.id:%d)\n",pre_comps.size(),pc.id)
    for i=0, post_comps.size()-1{
        post_gaba = post.mkPRL_GABA(post_comps.x[i],gmax)
        gabalist.append(post_gaba)
        gid = gid_base+(gidVec.x[i]-gidVec.x[0])*2
        //print gid
        pc.target_var(&post_gaba.pre,gid+1)
        pc.source_var(&post.Dend[post_comps.x[i]].v(0.5),gid) //for dummy
    }
    }
}

//----------------------------------------------------
// Connect Neurons to Neurons
// for example ln to ln, ln to pn
proc connectNtoN(){\
    local i, j,gid_base\
    localobj str,nil,pre,post
    printf("connectNtoN[%d]\n",pc.id)
    strdef _syn_path
    gid_base = 2000000

    for(i=0;i<NPN;i=i+1){
    //print "error pn"
    loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
    //print "error ln"
    loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    for(j=0;j<SynPathList.count();j+=1){
    //print SynPathList.o(j).synpath
    readSynapseList(SynPathList.o(j),gid_base)
    pc.barrier()
    makePreSynapse(SynPathList.o(j).pregid)
    pc.barrier()
    makePostSynapse(SynPathList.o(j).postgid,30,0.2)
    if(pre_comps.size() == post_comps.size()){
        gid_base += pre_comps.size()
    }else{
        print "ERROR IN CONNECTNTON"
        return (-1)
    }
   }
}

//----------------------------------------------------
// Connect Neurons to Neurons
// for example ln to ln, ln to pn
proc connectNtoN_NET_GABA(){\
    local i, j,gid_base, gmax\
    localobj str,nil,pre,post

    strdef _syn_path
    gid_base = 2000000
    printf("connectNtoN_NET_GABA[%d]\n",pc.id)
    for(i=0;i<NPN;i=i+1){
    //print "error pn"
    loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
    //print "error ln"
    loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    printf("SynPathList.count() %d [%d]\n",SynPathList.count(),pc.id)
    for(j=0;j<SynPathList.count();j+=1){
    //print "SynPathList ",j,SynPathList.o(j).synpath, SynPathList.o(j).pregid, SynPathList.o(j).postgid
    readSynapseList(SynPathList.o(j),gid_base)
    printf("gidVec [%d] \t",pc.id)
    for(i=0; i<gidVec.size();i=i+1){printf("%d\t",gidVec.x[i])}
    printf("\n")
    makePreSynapse(SynPathList.o(j).pregid)
    pc.barrier()
    if(int(SynPathList.o(j).postgid/100000)==2){//If post-synaptic neuron is PN
        printf("POST SYNAPSE IS PN(pc.id:%d)\n",pc.id)
        //makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,GMAX_LTOP/NLN)
        gmax = GMAX_LTOP/NLN
        //makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,5.0)
    }else{
        printf("POST SYNAPSE IS LN(pc.id:%d)\n",pc.id)
        gmax = GMAX_LTOL/NLN
    }
    makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,gmax)
    if(pre_comps.size() == post_comps.size()){
        gid_base += pre_comps.size()
    }else{
        print "ERROR IN CONNECTNTON"
        return (-1)
    }
    }
    printf("gabalist.count()=%d [%d]\n",gabalist.count(), pc.id)
}

proc connectNtoN_NET_GABA2(){\
    local i, j,gid_base,gmax_a, gmax_b, weight\
    localobj str,nil,pre,post

    strdef _syn_path
    gid_base = 2000000
    printf("connectNtoN_NET_GABA[%d]\n",pc.id)
    printf("NPN : %d NLN : %d\n",NPN,NLN)
    for(i=0;i<NPN;i=i+1){
    if(pc.id == 0){printf("loadSynapseInfo PN\n")}
    //print "error pn"
    loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
    if(pc.id == 0){printf("loadSynapseInfo LN\n")}
    //print "error ln"
    loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    printf("SynPathList.count() %d [%d]\n",SynPathList.count(),pc.id)
    for(j=0;j<SynPathList.count();j+=1){
    //print "SynPathList ",j,SynPathList.o(j).synpath, SynPathList.o(j).pregid, SynPathList.o(j).postgid
    readSynapseList2(SynPathList.o(j))
    if(int(SynPathList.o(j).postgid/100000)==2){//If post-synaptic neuron is PN
        //printf("POST SYNAPSE IS PN(pc.id:%d)\n",pc.id)
        //makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,GMAX_LTOP/NLN)
        //makeNET_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,1.0,10.0,GMAX_LTOP/NLN)
        //makeNET_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid)
        //makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,5.0)
        
            if(GABAA_ON == 1){
        gmax_a = GABAA_GMAX_LTOP/NLN
            }
        if(GABAB_ON == 1){
        gmax_b = GABAB_GMAX_LTOP/NLN
            }
    }else{
        //printf("POST SYNAPSE IS LN(pc.id:%d)\n",pc.id)
        //makePostSynapse_NET_GABA(SynPathList.o(j).postgid,1,10,GMAX_LTOL/NLN)
        //makeNET_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,1.0,10.0,GMAX_LTOL/NLN)
        //makeNET_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid)
            if(GABAA_ON == 1){
        gmax_a = GABAA_GMAX_LTOL/NLN
            }else if(GABAB_ON == 1){
        gmax_b = GABAB_GMAX_LTOL/NLN
            }
    }
    makeNET_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,1.0,weight,gmax_a,gmax_b)
    if(pre_comps.size() == post_comps.size()){
        //gid_base += pre_comps.size()
    }else{
        print "ERROR IN CONNECTNTON"
        return (-1)
    }
    }
    printf("gabalist.count()=%d [%d]\n",gabalist.count(),pc.id)
}

func connectNtoN_GABA(){\
    local i, j,gid_base\
    localobj str,nil,pre,post

    strdef _syn_path
    gid_base = 2000000
    print "Connect Neuron to Neuron with GABAergic synapse(PRL_GABA)"
    for(i=0;i<NPN;i=i+1){
    //print "error pn"
    //print pn_path[i].synpath
    loadSynapseInfo(nil,pn_path[i].synpath,2)
    }
    for(i=0;i<NLN;i=i+1){
    //print "error ln"
    //print ln_path[i].synpath
    loadSynapseInfo(nil,ln_path[i].synpath,2)
    }
    /*
    for(j=0;j<SynPathList.count();j+=1){
    SynPathList.o(j).write()
    }
    */
    for(j=0;j<SynPathList.count();j+=1){
    
    //print "SynPathList ",j,SynPathList.o(j).synpath, SynPathList.o(j).pregid, SynPathList.o(j).postgid
    readSynapseList(SynPathList.o(j),gid_base)
    if(int(SynPathList.o(j).postgid/100000)==2){//If post-synaptic neuron is PN
        //printf("POST SYNAPSE IS PN(pc.id:%d)\n",pc.id)
        makePRL_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,gid_base,GMAX_LTOP/NLN,0)
    }else{
        //printf("POST SYNAPSE IS LN(pc.id:%d)\n",pc.id)
        makePRL_GABAsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,gid_base,GMAX_LTOL/NLN,0)
    }
    
    pc.barrier()
    if(pre_comps.size() == post_comps.size()){
        gid_base += pre_comps.size()*2
    }else{
        print "ERROR IN CONNECTNTON"
        return (-1)
    }
    }
    return gid_base
}

proc connectNtoN_DUMMY(){\
    local i, j, gid_base,pre_gid, post_gid\
    localobj pre_dummy, post_dummy
    //printf("connectNtoN_DUMMY[%d]\n",pc.id)
    gid_base = $1
    if(pc.id==0){printf("pc.id\tpre_t\tpre_s\tpost_t\tpost_s\n")}
    if(pns.count()==0 && lns.count()==0){
    pre_dummy = rns.o(0).mkDUMMY(0)
    dummylist.append(pre_dummy)
    pre_gid = gid_base + (pc.id-NPN-NLN)%(pc.nhost-NPN-NLN)*2
    pc.target_var(&pre_dummy.dummy,pre_gid)
    pc.source_var(&rns.o(0).Dend[0].v(0.5),pre_gid+1)

    post_dummy = rns.o(0).mkDUMMY(1)
    dummylist.append(post_dummy)
    post_gid = gid_base + (pc.id+1-NPN-NLN)%(pc.nhost-NPN-NLN)*2
    pc.source_var(&rns.o(0).Dend[1].v(0.5),post_gid)
    pc.target_var(&post_dummy.dummy,post_gid+1)
    printf("%d\t%d\t%d\t%d\t%d\n",pc.id,pre_gid,pre_gid+1,post_gid+1,post_gid)
    }
}