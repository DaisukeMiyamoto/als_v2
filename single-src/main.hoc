{load_file("nrngui.hoc")}
{load_file("Stick_V2.hoc")}
{load_file("ranstream.hoc")}

//************************************************
if(name_declared("STOPTIME")!=5){ execute("STOPTIME=50")}
if(name_declared("IS_SUPERCOMPUTER")!=5){ execute("IS_SUPERCOMPUTER=0")}
if(name_declared("INTERVAL")!=5){ execute("INTERVAL=1200")}
if(name_declared("START_TIME")!=5){ execute("START_TIME=0")}
if(name_declared("GABAB_ON")!=5){ execute("GABAB_ON=0")}
if(name_declared("GABAA_ON")!=5){ execute("GABAA_ON=0")}
if(name_declared("NSYNAPSE")!=5){ execute("NSYNAPSE=10")}
if(name_declared("NPN")!=5){ execute("NPN=50")}
if(name_declared("NLN")!=5){ execute("NLN=350")}
if(name_declared("NRN")!=5){ execute("NRN=20000")}
if(name_declared("WEIGHT_RNtoPN")!=5){ execute("WEIGHT_RNtoPN=0.2")}
if(name_declared("WEIGHT_RNtoLN")!=5){ execute("WEIGHT_RNtoLN=0.05")}
if(name_declared("GABAA_LTOL")!=5){ execute("GABAA_LTOL=1.0")}
if(name_declared("GABAB_LTOL")!=5){ execute("GABAB_LTOL=1.0")}
if(name_declared("GABAA_LTOP")!=5){ execute("GABAA_LTOP=1.0")}
if(name_declared("GABAB_LTOP")!=5){ execute("GABAB_LTOP=1.0")}

objref pc
pc = new ParallelContext()

NCELL = NPN + NLN + NRN
// NCELL : number of whole cells

if(pc.id==0){
    printf("===================================================================\n")
    printf("START_TIME: %d, STOPTIME: %d, IS_SUPERCOMPUTER: %d\n",START_TIME,STOPTIME,IS_SUPERCOMPUTER) 
    printf("NPN: %d, NLN: %d, NRN: %d, NCELL:%d\n",NPN,NLN,NRN,NCELL)
    printf("GABAA_ON: %d, GABAB_ON: %d, NSYNAPSE: %d\n",GABAA_ON, GABAB_ON, NSYNAPSE)
    printf("WEIGHT_RNtoPN: %f, WEIGHT_RNtoLN: %f\n",WEIGHT_RNtoPN, WEIGHT_RNtoLN)
    printf("GABAA_LTOP: %f, GABAA_LTOL: %f, GABAB_LTOP: %f, GABAB_LTOL: %f\n",GABAA_LTOP, GABAA_LTOL,GABAB_LTOP, GABAB_LTOL)
    printf("===================================================================\n")
}
objref cells, nclist
objref ranlist
proc mkNetwork(){
    if(pc.id==0)printf("mkNetwork()\n")
    mkCells($1)
    
    mkConnections()
}

objref PNs, LNs, RNs
proc mkCells(){local i,ncell localobj cell, nc, nil
    if(pc.id==0)printf("mkCells()\n")
    ncell = $1
    //cells = new List()
    PNs   = new List()
    LNs   = new List()
    RNs   = new List()
    for(i=pc.id; i<ncell; i+=pc.nhost){
	cell = new Stick()
	//cells.append(cell)
	if(i < NPN){
	    printf("MAKE PN:%d[%d]\n",i,pc.id)
	    //cell.insertFukuda()
	    cell.insertFukuda_tunned()
	    cell.setGID(i)
	    cell.setType(1)
	    //cell.setPN_biophys()
	    PNs.append(cell)
	    
	    psection()
	}else if((i>=NPN) && (i<NPN+NLN)){
	    printf("MAKE LN:%d[%d]\n",i,pc.id)
	    cell.insertLNlla()
	    cell.setGID(i)
	    cell.setType(2)
	    //cell.setPN_biophys()
	    LNs.append(cell)
	}else if((i>=NPN+NLN) && (i<NCELL)){
	    //printf("MAKE RN:%d[%d]\n",i,pc.id)
	    cell.insertHH_RN()
	    cell.setGID(i)
	    cell.setType(3)
	    cell.setRN_biophys()
	    RNs.append(cell)
	}else{
	    printf("[ERROR] mkcells()[%d]",pc.id)
	    quit()
	}
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
    }
}

proc mkConnections(){
    if(pc.id==0)printf("mkConnections()\n")
    // connect RN to LN and PN
    ConnectWithRN()
    
    // connect LN and PN
    ConnectNtoN_NET_GABA()
}

objref rn_nclist
proc ConnectWithRN(){local i, j, base_gid, this_gid localobj syn, nc, nil, rnd
    if(pc.id==0)printf("ConnectWithRN()\n")
    rn_nclist = new List()
    rnd = new Random(pc.id)
    rnd.uniform(0,NRN)
    base_gid = 100000
    //--------------------------------------
    // MAKE PRESYNAPSE
    for i=0, RNs.count()-1{
	nc = RNs.o(i).connect2target(nil)
	nc.threshold = 1
	this_gid = base_gid+RNs.o(i).getGID()-NLN-NPN
	pc.set_gid2node(this_gid,pc.id)
	pc.cell(this_gid,nc)
	rn_nclist.append(nc)
    }

    //--------------------------------------
    // MAKE POSTSYNAPSE
    for i=0, PNs.count-1{
	for j=0, NSYNAPSE-1{
	    syn = PNs.o(i).setExp2Syn(0)
	    src_gid = base_gid+int(rnd.repick())
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = WEIGHT_RNtoPN
	    rn_nclist.append(nc)
	}
    }
    for i=0, LNs.count-1{
	for j=0, NSYNAPSE-1{
	    syn = LNs.o(i).setExp2Syn(0)
	    src_gid = base_gid+int(rnd.repick())
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = WEIGHT_RNtoLN
	    rn_nclist.append(nc)
	}
    }
}

objref nton_nclist, nton_GABAa, nton_GABAb

proc ConnectNtoN_NET_GABA(){\
    local i, j, base_gid, this_gid, gmax_LtoPa, gmax_LtoPb, gmax_LtoLa, gmax_LtoLb\
    localobj rnd, nc, nil, gaba
    if(pc.id==0)printf("ConnectNtoN_NET_GABA()\n")
    nton_nclist   = new List()
    nton_GABAa = new List()
    nton_GABAb = new List()
    rnd = new Random(pc.id)
    rnd.uniform(0,1)
    base_gid = 200000

    gmax_LtoPa = GABAA_LTOP/NLN
    gmax_LtoLa = GABAA_LTOL/NLN
    gmax_LtoPb = GABAB_LTOP/NLN
    gmax_LtoLb = GABAB_LTOL/NLN
    printf("%f %f %f %f\n", gmax_LtoPa, gmax_LtoPb, gmax_LtoLa, gmax_LtoLb)
    printf("LNs.count: %d[%d]\n",LNs.count, pc.id)
    //--------------------------------------
    // MAKE PRESYNAPSE
    for i=0, LNs.count-1{
	nc = LNs.o(i).connect2target(nil)
	nc.threshold = 1
	this_gid = base_gid + LNs.o(i).getGID()-NPN
	pc.set_gid2node(this_gid,pc.id)
	pc.cell(this_gid,nc)
	nton_nclist.append(nc)
	//printf("[PRE_GABA] gid: %d, LN's gid: %d, i: %d\n",this_gid,LNs.o(i).getGID(),i) 
    }

    //--------------------------------------
    // MAKE POSTSYNAPSE
    for i=0, PNs.count-1{
	for j=0, NLN-1{
	    if(GABAA_ON == 1){
		if(rnd.repick()<1.1){
		    gaba = PNs.o(i).mkNET_GABAa(gmax_LtoPa)
		    nton_GABAa.append(gaba)
		    src_gid = base_gid + j
		    nc = pc.gid_connect(src_gid,gaba)
		    nc.delay  = 1.0
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    //printf("[PST_GABAa] gid: %d, PN's gid: %d, i: %d\n",src_gid,PNs.o(i).getGID(),i) 
		}
	    }
	    if(GABAB_ON == 1){
		if(rnd.repick()<1.1){
		    gaba = PNs.o(i).mkNET_GABAb(gmax_LtoPb)
		    nton_GABAb.append(gaba)
		    src_gid = base_gid + j
		    nc = pc.gid_connect(src_gid,gaba)
		    nc.delay  = 1.0
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    //printf("[PST_GABAb] gid: %d, PN's gid: %d, i: %d\n",src_gid,PNs.o(i).getGID(),i) 
		}
	    }

	}
    }
    for i=0, LNs.count-1{
	for j=0, NLN-1{
	    if((LNs.o(i).getGID()-NPN)==j){
		continue
	    }
	    if(GABAA_ON == 1){
		if(rnd.repick()<1.1){
		    gaba = LNs.o(i).mkNET_GABAa(gmax_LtoLa)
		    nton_GABAa.append(gaba)
		    src_gid = base_gid + j
		    nc = pc.gid_connect(src_gid,gaba)
		    nc.delay  = 1.0
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    //printf("[PST_GABAa] gid: %d, LN's gid: %d, i: %d\n",src_gid,LNs.o(i).getGID(),i) 
		}
	    }
	    if(GABAB_ON == 1){
		if(rnd.repick()<1.1){
		    gaba = LNs.o(i).mkNET_GABAb(gmax_LtoLb)
		    nton_GABAb.append(gaba)
		    src_gid = base_gid + j
		    nc = pc.gid_connect(src_gid,gaba)
		    nc.delay  = 1.0
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    //printf("[PST_GABAb] gid: %d, LN's gid: %d, i: %d\n",src_gid,LNs.o(i).getGID(),i) 
		}
	    }
	}
    }
}
mkNetwork(NCELL)

proc mkSerialStim(){local i localobj rnd
    rnd = new Random(pc.id)
    strdef spiketiming
    for(i=0; i<RNs.count();i=i+1){
        //sprint(spiketiming,"../input/spiketiming/100dose_1stims/spt%03d.dat",int(rnd.uniform(0,999)))
	//sprint(spiketiming,"../input/spiketiming/100dose_1stims_filtering/spt%03d.dat",int(rnd.uniform(0,999)))
	//sprint(spiketiming,"../input/spiketiming/1000dose_1stims_filtering/spt%03d.dat",int(rnd.uniform(0,999)))
	sprint(spiketiming,"../input/spiketiming/1000dose_30stims_filtering/spt%03d.dat",int(rnd.uniform(0,999)))
	//sprint(spiketiming,"../input/spiketiming/1stim/spiketiming%d.dat",int(rnd.uniform(0,999)))
        RNs.o(i).setIClamp2(STOPTIME,dt,spiketiming)
        //rns.o(i).setIClamp_with_Latency(STOPTIME,dt,spiketiming,START_TIME+pc.nhost*i+pc.id)
    }
}
objref ic_list
proc mkIclamp_LN(){local i localobj ic
    ic_list = new List()
    //    for i=0, LNs.count()-1{
    for i=0, 0{
	ic = LNs.o(i).setIclamp(50,10,30)
	ic_list.append(ic)
	ic = LNs.o(i).setIclamp(100,10,30)
	ic_list.append(ic)
	ic = LNs.o(i).setIclamp(150,10,30)
	ic_list.append(ic)
	ic = LNs.o(i).setIclamp(200,10,30)
	ic_list.append(ic)
    }
}
proc mkIclamp_PN(){local i localobj ic
    ic_list = new List()
    for i=0, PNs.count()-1{
	ic = PNs.o(i).setIclamp(50,10,30)
	ic_list.append(ic)
	ic = PNs.o(i).setIclamp(100,10,30)
	ic_list.append(ic)
	ic = PNs.o(i).setIclamp(150,10,30)
	ic_list.append(ic)
	ic = PNs.o(i).setIclamp(200,10,30)
	ic_list.append(ic)
    }
}

proc mkStim(){
    mkSerialStim()
    //mkIclamp_LN()
    //mkIclamp_PN()
}
mkStim()


proc setVoltageRecord(){local i
    if(pc.id==0)printf("setVoltageRecord()\n")
    for i = 0, PNs.count()-1{
	PNs.object(i).setVoltageRecord()
    }
    for i = 0, LNs.count()-1{
	LNs.object(i).setVoltageRecord()
    }
    for i = 0, RNs.count()-1{
	RNs.object(i).setVoltageRecord()
    }
}

proc setSpikeRecord(){local i
    if(pc.id==0)printf("setSpikeRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).setSpikeRecord()
    }
    for i = 0, LNs.count -1{
	LNs.object(i).setSpikeRecord()
    }
    for i = 0, RNs.count -1{
	RNs.object(i).setSpikeRecord()
    }
}

proc setRecord(){
    if(pc.id==0)printf("setRecord()\n")
    setVoltageRecord()
    setSpikeRecord()
}
setRecord()
//psection()
pc.barrier()
tstop = STOPTIME
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

strdef FPRINT_DIR
strdef SPIKEOUT_DIR
if(IS_SUPERCOMPUTER == 1){
    FPRINT_DIR = "./"
}else if(START_TIME == 0){
    FPRINT_DIR = "../single-result/record/"
    SPIKEOUT_DIR = "../single-result/spike/"
}else{
    sprint(FPRINT_DIR,"../single-result/%010d/record/",START_TIME)
    sprint(SPIKEOUT_DIR,"../single-result/%010d/spike/",START_TIME)
}
print FPRINT_DIR
proc printSpikeRecord(){local i
    if(pc.id==0)printf("printSpikeRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).printSpikeRecord(pc.id,PNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
    }
    for i = 0, LNs.count -1{
	LNs.object(i).printSpikeRecord(pc.id,LNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
    }
    for i = 0, RNs.count -1{
	if(i%40==0){
	    RNs.object(i).printSpikeRecord(pc.id,RNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
	}
    }
}

proc printVoltageRecord(){
    if(pc.id==0)printf("printVoltageRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).printVoltageRecord(pc.id,PNs.o(i).getGID(),FPRINT_DIR)
    }
    for i = 0, LNs.count -1{
	LNs.object(i).printVoltageRecord(pc.id,LNs.o(i).getGID(),FPRINT_DIR)
    }
    for i = 0, RNs.count -1{
	if(i%40==0){
	    RNs.object(i).printVoltageRecord(pc.id,RNs.o(i).getGID(),FPRINT_DIR)
	}
    }
}
proc setPrinter(){
    printSpikeRecord()
    printVoltageRecord()
}
setPrinter()

{pc.runworker()}
{pc.done()}
quit()