//------------------------------------
// MODIFIED HISTORY
// 2015.01.08
// 2015.04.30
// 2015.05.20
//------------------------------------


//This code is for al_V2
//CellSwc Version 3.0

{load_file("stdlib.hoc")}


/*
Use ExpSid to make synapse
*/

begintemplate CellSwc
//------------------------------------------------------
// Original Variables and Functions
public init, shape, translation, subsets, geom, biophys, geom_nseg, biophys_inhomo, makeSyn, makeNetCon
public Scalex, ScaleY, ScaleZ, Shrinkagex, Shrinkagey, Shrinkagez
public all, secInput, secOutput
public SynList
public Dend, SectionNum

//-------------------------------------------------------
// Public Functions
public connect2target
public mkSyn,mkExp2Syn
public mkSynapses, synapses
public mkGABA, mkDUMMY
public setPath, setNid, setGid, setSpikegenlist
public setIntermitStim_gaus,setIClamp, mkIclamp
public insertHH, insertHH_RN, insertLNlla, insertFukuda_tunned
public getAxon

//-------------------------------------------------------
// Public Variables
public ID, Type, pID //pID -> parent ID
public gid, nid, cellid, swcid, cloneid, ppath, synpath
public synlist_
public synlist,synapse
public SynNumberList, numSynapse
public SynPathList //Synapse information file path list
public fromRNsyn
public axonlist, cellbodylist, dendlist, noaxonlist, spikegenlist

// will be re-created in shape()
create Dend[1]

//------------------------------------------------------------------------------
// swc header informations
//------------------------------------------------------------------------------
strdef HeaderOriginalSource
strdef HeaderCreature
strdef HeaderRegion
strdef HeaderFieldLayer
strdef HeaderType
strdef HeaderContributor
strdef HeaderReference
strdef HeaderRaw
strdef HeaderExtras
strdef HeaderSomaArea
strdef HeaderShrinkageCorrection
strdef HeaderVersionNumber
strdef HeaderVersionDate
strdef HeaderScale
ScaleX = ScaleY = ScaleZ = 1
Shrinkagex = Shrinkagey = Shrinkagez = 1
SectionNum = 1

//------------------------------------------------------------------------------
// Section lists
//------------------------------------------------------------------------------
objref all, secInput, secOutput
objref axonlist, cellbodylist, dendlist, noaxonlist, spikegenlist

//------------------------------------------------------------------------------
// List
//------------------------------------------------------------------------------
objref SynPathList 
objref SynNumberList

//------------------------------------------------------------------------------
// synaptic points
//------------------------------------------------------------------------------
objref SynList
objref SynNo

objref synlist

objref synlist_
//------------------------------------------------------------------------------
// geometry
//------------------------------------------------------------------------------
tranlationX = translationY = translationZ = 0

//------------------------------------------------------------------------------
// procedures / functions interface
//------------------------------------------------------------------------------
// proc init()
// proc shape()
// proc translation()
// proc subsets()
// proc geom()
// proc biophys()
// proc geom_nseg()
// proc biophys_inhomo()
// obfunc makeSyn()
// obfunc makeNetCon

//
objref this
proc init() {
    strdef swc_filename
    swc_filename = $s1
    strdef fromRNsyn
    gid     = $2
    cellid  = $3
    swcid   = $4
    cloneid = $5
    
    SynList = new List()
    synlist = new List()
    SynNo = new Vector()
    
    SynNumberList = new Vector()


    
    synlist_ = new List()
    SynPathList = new List()

    all = new SectionList()
    secInput = new SectionList()
    secOutput = new SectionList()

    axonlist = new SectionList()

    shape(swc_filename)
    subsets()
    geom()
    biophys()
    geom_nseg()
}

objref ID, Type, pID //pID -> parent ID
proc shape() { localobj strFunc, fobj strdef str, strName, strValue, strTemp
	fobj = new File()
	{fobj.ropen($s1)}
	strFunc = new StringFunctions()

	//--------------------------------------------------------------------------
	// load header information
	//--------------------------------------------------------------------------
	curLine = 0
	dataLineOverHead = 0
	while (!fobj.eof()) {
		fobj.gets(str)
		strFunc.head(str, " ", strName)
		strFunc.tail(strName, "#", strName)
		strFunc.tail(str, " ", strValue)
		strFunc.head(strValue, "\n", strValue)
		
		strFunc.head(str, "[^#]", strTemp)
		if (0 != strcmp("#", strTemp)) {
			dataLineOverHead = curLine
			break
		}
		
		if (!strcmp(strName, "ORIGINAL_SOURCE")) {
			HeaderOriginalSource = strValue
		}
		if (!strcmp(strName, "CREATURE")) {
			HeaderCreature = strValue
		}
		if (!strcmp(strName, "REGION")) {
			HeaderRegion = strValue
		}
		if (!strcmp(strName, "FIELD/LAYER")) {
			HeaderFieldLayer = strValue
		}
		if (!strcmp(strName, "TYPE")) {
			HeaderType = strValue
		}
		if (!strcmp(strName, "CONTRIBUTOR")) {
			HeaderContributor = strValue
		}
		if (!strcmp(strName, "REFERENCE")) {
			HeaderReference = strValue
		}
		if (!strcmp(strName, "RAW")) {
			HeaderRaw = strValue
		}
		if (!strcmp(strName, "EXTRAS")) {
			HeaderExtras = strValue
		}
		if (!strcmp(strName, "SOMA_AREA")) {
			HeaderSomaArea = strValue
		}
		if (!strcmp(strName, "SHRINKAGE_CORRECTION")) {
			HeaderShrinkageCorrection = strValue
			sscanf(HeaderShrinkageCorrection, "%f %f %f", &ShrinkageX, &ShrinkageY, &ShrinkageZ)
		}
		if (!strcmp(strName, "VERSION_NUMBER")) {
			HeaderVersionNumber = strValue
		}
		if (!strcmp(strName, "VERSION_DATE")) {
			HeaderVersionDate = strValue
		}
		if (!strcmp(strName, "SCALE")) {
			HeaderScale = strValue
			sscanf(HeaderScale, "%f %f %f", &ScaleX, &ScaleY, &ScaleZ)
			//printf("Scale (%f, %f, %f)\n", ScaleX, ScaleY, ScaleZ)
		}
		
		curLine += 1
	}
	
	SectionNum = 0
	while (!fobj.eof()) {
		SectionNum = fobj.scanvar()-1
		for i = 2, 7 {
			fobj.scanvar()
		}
	}
	
	{fobj.close()}
	
	{fobj.ropen($s1)}
	
	curLine = 0
	while (curLine < dataLineOverHead) {
	    fobj.gets(strTemp)
	    curLine += 1
	}
	
	//--------------------------------------------------------------------------------
	// create multi-compartment model
	//---------------------------------------------------------------------------------
	create Dend[SectionNum]
	ID = new Vector(SectionNum)
	Type = new Vector(SectionNum)
	pID = new Vector(SectionNum)

	// root node
	rootNo = fobj.scanvar() - 2
	type_root = fobj.scanvar()
	x_root = fobj.scanvar()
	y_root = fobj.scanvar()
	z_root = fobj.scanvar()
	d_root = fobj.scanvar()
	parentNo_root = fobj.scanvar() - 2
	
	while (1) { // while current node's connected to the root node
	    curNo = fobj.scanvar() - 2
	    type = fobj.scanvar()
	    x = fobj.scanvar()
	    y = fobj.scanvar()
	    z = fobj.scanvar()
	    d = fobj.scanvar()
	    parentNo = fobj.scanvar() - 2
	    ID.x[curNo]=curNo
	    Type.x[curNo]=type
	    pID.x[curNo]=parentNo
	    if (parentNo != rootNo){break}
	    Dend[curNo] {
		pt3dclear()
		pt3dadd(x_root * ScaleX, y_root * ScaleY, z_root * ScaleZ, d_root)
		pt3dadd(x * ScaleX, y * ScaleY, z * ScaleZ, d)
	    }
	}
	
	Dend[parentNo] {
	    parentX = x3d(1)
	    parentY = y3d(1)
	    parentZ = z3d(1)
	    parentDiam = diam3d(1)
	}
	Dend[curNo] {
	    pt3dclear()
	    pt3dadd(parentX, parentY, parentZ, parentDiam)
	    pt3dadd(x * ScaleX, y * ScaleY, z * ScaleZ, d)		
	}
	connect Dend[curNo](0), Dend[parentNo](1)
	
	while (!fobj.eof()) {
	    curNo = fobj.scanvar() - 2
	    type = 	fobj.scanvar()
	    x = fobj.scanvar()
	    y = fobj.scanvar()
	    z = fobj.scanvar()
	    d = fobj.scanvar()
	    parentNo = fobj.scanvar() - 2
	    ID.x[curNo]=curNo
	    Type.x[curNo]=type
	    pID.x[curNo]=parentNo
	    	    
	    Dend[parentNo] {
		parentX = x3d(1)
		parentY = y3d(1)
		parentZ = z3d(1)
		parentDiam = diam3d(1)
	    }
	    Dend[curNo] {
		pt3dclear()
		pt3dadd(parentX, parentY, parentZ, parentDiam)
		pt3dadd(x * ScaleX, y * ScaleY, z * ScaleZ, d)		
	    }
	    connect Dend[curNo](0), Dend[parentNo](1)
	}
	
	{fobj.close()}
	
	//print "load : ", $s1, " ok"
} // shape()

proc translation() {
	translationX = $1
	translationY = $2
	translationZ = $3
	forall {
		x0 = x3d(0)
		y0 = y3d(0)
		z0 = z3d(0)
		diam0 = diam3d(0)
		x1 = x3d(1)
		y1 = y3d(1)
		z1 = z3d(1)
		diam1 = diam3d(1)
		pt3dclear()
		pt3dadd(translationX + x0, translationY + y0, translationZ + z0, diam0)
		pt3dadd(translationX + x1, translationY + y1, translationZ + z1, diam1)
	}
}

proc subsets() {
	Dend[0] all.wholetree()
}

proc getAxon(){local i, type_axon
    type_axon = 3
    for i=0, SectionNum-1{
	if(Type.x[i] == type_axon){
	    Dend[i] axonlist.append()
	}
    }
}

obfunc sl2list() {localobj tmplist
    // arguments
    // $o1: SectionList
    tmplist = new List()
    forsec $o1 tmplist.append(new SectionRef())
    return tmplist
}

func countSL() {local i
    // arguments
    // $o1: SectionList
    i=0
    forsec $o1 {
	i+=1
    }
    return i
}

proc setSpikegenlist(){local j, axonnum localobj tmplist
    SPIKEGEN_POS  = $1
    SPIKEGEN_SIZE = $2

    noaxonlist   = new SectionList()
    spikegenlist = new SectionList()
    
    this.Dend[0] noaxonlist.wholetree()
    noaxonlist.remove(axonlist)
    
    axonnum = countSL(axonlist)
    tmplist = sl2list(axonlist)
    SPIKEGEN_POS = int(SPIKEGEN_POS)
    SPIKEGEN_SIZE = int(SPIKEGEN_SIZE)
    j = SPIKEGEN_POS
    while(j < axonnum && j < SPIKEGEN_POS+SPIKEGEN_SIZE) {
 	tmplist.o(j).sec spikegenlist.append()
 	j+=1
    }
}

strdef ppath, synpath
proc setPath(){
    ppath   = $s1
    synpath = $s2
}
proc setNid(){
    /*
    if(cellid == 1){
	nid = cellid * 100000 + swcid
    }else{
	nid = cellid * 100000 + swcid*1000 + cloneid
    }
    */
    nid = cellid * 100000 + swcid*1000 + cloneid
}

proc setGid(){
    gid = cellid * 100000 + swcid*1000 + cloneid
}

proc geom() {
}

proc biophys() {
	// forall {
	// 	Ra = 100
	// 	cm = 1
	// }
}

external lambda_f
proc geom_nseg() {
	forall { nseg = int((L / (0.1 * lambda_f(100)) + .9) / 2) * 2 + 1 }
}

proc biophys_inhomo() {}

proc insertHH(){
    forall{
	insert hh
    }
}

proc insertHH_RN(){
    forall{
	insert hh
	gkbar_hh = 0.001
	gnabar_hh = 0.0001 
    }
}

proc insertLNlla(){
    forall{
	insert hh
	gnabar_hh = 0.190
	gkbar_hh = 0.060
	gl_hh = 0.0001
	el_hh = -67
	ena = 50
	ek = -100
	insert IAHP2
	eahp_IAHP2 = -140
	insert cad
	ctau_cad = 0.0000125
	insert ICA
	eca = 120
    }
}
proc insertFukuda_tunned(){
    mechanism_flg = 3
    forall{
        insert GPeA
        ena_GPeA = 55
        ek_GPeA = -70
	eca_GPeA = 124
        el_GPeA = -50
        //a_m_GPeA = 0.065
        a_m_GPeA = 0.048
        //a_W_GPeA = 0.055
        a_W_GPeA = 0.060
    }
}


objref syn_
obfunc makeSyn() { local targetno localobj r
	// args : targetSectionNo, tau1, tau2, e
	for i = 0, SynNo.size-1 {
		if ($1 == SynNo.x[i]) return SynList.object(i)
	}
	if ($1 == -1) {
		r = new Random()
		r.uniform(0, SectionNum-1)
		targetno = int(r.repick())
	} else {
		targetno = $1
	}
	SynNo.append(targetno)
	this.Dend[targetno] syn_ = new Exp2Syn(0.5) SynList.append(syn_)
	syn_.tau1 = $2
	syn_.tau2 = $3
	syn_.e = $4
	return syn_
}
numSynapse = 0
strdef SynF //Synapse List File name
proc ReadSynlist(){local i localobj f
    f = new File()
    SynNumberList = new Vector()
    SynF = $s1
    f.ropen(SynF)
    numSynapse = f.scanvar()
    for i=0, numSynapse-1{
	SynNumberList.append(f.scanvar())
    }
    //print numSynapse
    //print SynNumberList
}
strdef str1

//make synapses to connect RN and other cells
proc mkSynapses(){local i
    //$s1 = Synapse list data file name
    str1 = $s1
    ReadSynlist(str1)
    //for test
    /*
    for i = 0, SectionNum-1{
	synapses(i)
    }*/


    //print SynNumberList
    for i=0, SynNumberList.size()-1{
	/*	
	print "pre"
	Dend[SynNumberList.x[i]] print secname()
	print "post"
	*/
	synapses(SynNumberList.x[i])
    }
}

objref syn__
proc synapses(){local targetno, tau1, tau2, rev_e
    targetno = $1
    //print targetno
    tau1  = 1
    tau2  = 0.5
    rev_e = 0
    this.Dend[targetno] syn__ = new Exp2Syn(0.2) synlist.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.4) synlist.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.6) synlist.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.8) synlist.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
}

/*
proc synapse(){local targetno
    targetno = $1
    //    print "targetno ",targetno
    Dend[targetno] syn__ = new ExpSid(0.5) synlist.append(syn__)
    //    syn__.tau = 2
    //    syn__.e = -80
}
*/

objref Syn__
obfunc mkSyn(){local targetno
    targetno = $1
    
    this.Dend[targetno] Syn__ = new ExpSyn(0.5) synlist_.append(Syn__) 
    Syn__.tau = 0.1
    Syn__.e   = $2
    return Syn__
}

obfunc mkExp2Syn(){local targetno
    targetno = $1
    
    this.Dend[targetno] Syn__ = new Exp2Syn(0.5) synlist_.append(Syn__) 
    
    Syn__.tau1 = 1
    Syn__.tau2 = 2
    Syn__.e   = $2
    return Syn__
}

obfunc connect2target(){local numSynapses,pre_comp localobj nc,target
    pre_comp = $1
    target = $o2
    //numSynapses = $3
    this.Dend[pre_comp] nc = new NetCon(&v(0.5),target)
    nc.threshold = 1
    //nc.weight = 10/numSynapses
    //print "nc.weight ",nc.weight
    return nc
}

objref gaba
obfunc mkGABA(){local gmax,comp
    comp = $1
    gmax = $2
    this.Dend[comp] gaba = new PRL_GABA(0.5)
    gaba.gmax = gmax
    return gaba
}

objref dummy
obfunc mkDUMMY(){
    comp = $1
    this.Dend[comp] dummy = new DUMMY(0.5)
    return dummy
}

public doNothing
proc doNothing(){
    print $s1
    print "do nothing"
}

objref iclamp
obfunc mkIclamp(){local id, num,targetno
    targetno = $1
    //print "setSinglePulse ", gid
    this.Dend[targetno] iclamp = new IClamp(0.5)
    if(numarg()!=4){
	iclamp.dur = 2
	iclamp.amp = 6
	iclamp.del = 0.5
    }else{
	iclamp.dur = $2
	iclamp.amp = $3
	iclamp.del = $4
    }
    //iclamp.del = 2*id*(num+1)
    //iclamp.del = 20*id*(num+1)
    //    psection()
    return iclamp
}


obfunc makeNetCon() { local targetno localobj nc, r
	// args : sourceSectionNo, targetSyn, threshold, delay, weight
	if ($1 == -1) {
		r = new Random()
		r.uniform(0, SectionNum)
		targetno = int(r.repick())
	} else {
		targetno = $1
	}
	// NetCon(source, target, threshold, delay, weight)
	Dend[targetno] nc = new NetCon(&v(0.5), $o2, $3, $4, $5)
	return nc
}

objref st
proc setIntermitStim_gaus(){local targetno, delay, imax, interval, imax2, nstim,sigma_o
    targetno = $1
    delay    = $2
    imax     = $3
    interval = $4
    imax2    = $5
    nstim    = $6
    sigma_o  = $7
    
    Dend[targetno] st = new intermitStimGaus(0.1)
    st.del = delay
    st.Imax = imax
    st.interval = interval
    st.tau_fall = 400 
    
    st.Imax2 = imax2
    st.nStim = nstim
    
    st.sigma_o = sigma_o
    //return st
}

/*
num_spike : number of spikes
*/
objref ic
objref stim_vec, tvec, stim_flg, spiketiming
proc setIClamp(){local stoptime, timestep, i, j, num_spike, flg, stim_on,start_time, length, amp, L_RATIO,A_RATIO  localobj rand, datafile
    stoptime = $1
    timestep = $2
    strdef filename
    filename = $s3

    span = stoptime/timestep
    
    //print "stoptime ",stoptime, " timestep ",timestep, " span ",span

    this.Dend[0] ic = new IClamp(1.0)
    ic.del = 0
    ic.dur = 1e9
    
    L_RATIO = 2.0
    A_RATIO = 0.3
    amp = 15
    length = 0.5
    tvec = new Vector(span)
    for i=0,span -1 {
	tvec.x[i] = timestep * i
    }
    stim_flg = new Vector(span,0)
    spiketiming = new Vector()
    datafile = new File()
    stim_vec = new Vector(span,0)
    //sprint(filename,"spiketiming0.dat")
    datafile.ropen(filename)
  
    while(!datafile.eof()){
	var = datafile.scanvar()
	//print "datafile " ,var
	spiketiming.append(var-6.0)
    }
    spiketiming.remove(spiketiming.size()-1)
    num_spike = spiketiming.size()
        
    //print filename
    //spiketiming.printf("%5.8f\n")
    datafile.close()
    j=0
    for i=0, span -1{
	if(j<(num_spike-1)){
	    //print tvec.x[i]
	    if(((spiketiming.x[j]*1000) <= tvec.x[i])&&((spiketiming.x[j+1]*1000) > tvec.x[i])){
		stim_flg.set(i,1)
		j +=1
	    }
	}
    }
    flg = 0
    stim_on = 0
    for i=0, span-1{
	if(stim_flg.x[i]==1){
	    stim_on = 1
	}
	if(stim_on == 1){
	    if(flg == 0){
		start_time =tvec.x[i]
		flg = 1
	    }
	    if(tvec.get(i) == start_time){
		stim_vec.set(i,0)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=0){
		stim_vec.set(i,-amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=length){
		stim_vec.set(i,amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=L_RATIO*length){
		stim_vec.set(i,-amp*A_RATIO)
		//print stim_vec.get(i)
	    }else{
		stim_vec.set(i,0)
		stim_on = 0
		flg = 0
	    }
	}
    }
    stim_vec.play(&ic.amp, tvec, 1)
    //print "stim_vec"
    //stim_vec.printf()
}

endtemplate CellSwc
