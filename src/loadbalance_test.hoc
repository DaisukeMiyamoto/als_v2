//************************************************
// FILE NAME : main.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//

//************************************************
// FUNCTION LIST
//************************************************
// mkNetwork()
// mkCells()
// mkConnections()
// mkStimulations()
// setRecorder()
// setPrinter()
//************************************************
{load_file("nrngui.hoc")}
{load_file("stdlib.hoc")}

{load_file("CellSwc3.hoc")}
{load_file("loadinfo.hoc")}
{load_file("areaList.hoc")}
{load_file("exSectionList.hoc")}
//{load_file("declare_parameters.hoc")}
//************************************************
// For Goto's PN model parameter
if(name_declared("SPIKEGEN_POS")!=5){ execute("SPIKEGEN_POS=10")}
if(name_declared("SPIKEGEN_SIZE")!=5){ execute("SPIKEGEN_SIZE=10") }
if(name_declared("GKDRBAR")!=5){ execute("GKDRBAR=0.7") }
if(name_declared("GNABAR")!=5){ execute("GNABAR=1.2") }
if(name_declared("GCATBAR")!=5){ execute("GCATBAR=0.0015") }
if(name_declared("GKCABAR")!=5){ execute("GKCABAR=0.15") }
if(name_declared("KCA")!=5){ execute("KCA=2.4") }
if(name_declared("KNA")!=5){ execute("KNA=3.0") }
if(name_declared("KK")!=5){ execute("KK=KNA") }
if(name_declared("CM")!=5){ execute("CM=1") } //
if(name_declared("GL")!=5){ execute("GL=0.00035") } //
if(name_declared("EL")!=5){ execute("EL=-60") } //
if(name_declared("CAGAIN")!=5){ execute("CAGAIN=0.16")}

//************************************************
if(name_declared("STOPTIME")!=5){ execute("STOPTIME=50")}
if(name_declared("IS_SUPERCOMPUTER")!=5){ execute("IS_SUPERCOMPUTER=0")}
if(name_declared("INTERVAL")!=5){ execute("INTERVAL=1200")}
if(name_declared("START_TIME")!=5){ execute("START_TIME=0")}
if(name_declared("WEIGHT_200")!=5){ execute("WEIGHT_200=0.05")}
if(name_declared("WEIGHT_300")!=5){ execute("WEIGHT_300=0.05")}
if(name_declared("WEIGHT_301")!=5){ execute("WEIGHT_301=0.008")}
if(name_declared("GMAX_LTOL")!=5){ execute("GMAX_LTOL=5.0")}
if(name_declared("GMAX_LTOP")!=5){ execute("GMAX_LTOP=0.6")}


/*
if(name_declared("SWC_FILENAME")==0) { 
	execute("strdef SWC_FILENAME SWC_FILENAME=\"./050622_4_sn.swc\"")
}
*/
RNperSYN = 5
strdef info_filename
//info_filename = "../input/network_info/network_info_3cells.dat"
//info_filename = "../input/network_info/network_info_40cells.dat"
//info_filename = "../input/network_info/network_info_1LN.dat"
info_filename = "../input/network_info/network_info_8PNs.dat"
//info_filename = "../input/network_info/network_info_8LN1s.dat"
//info_filename = "../input/network_info/network_info_8LN2s.dat"
strdef info_filename_rn
//info_filename_rn = "../input/network_info/network_info_2000rns.dat"
//info_filename_rn = "../input/network_info/network_info_500rns.dat"
//info_filename_rn = "../input/network_info/network_info_20000rns.dat"
//info_filename_rn = "../input/network_info/network_info_1rns.dat"
/*
if(IS_SUPERCOMPUTER == 0){
    info_filename = "../input/network_info/network_info_3cells.dat"
    info_filename_rn = "../input/network_info/network_info_500rns.dat"
}
*/
objref pc
pc = new ParallelContext()
//STOPTIME = 300
if(pc.id==0){
    printf("STOPTIME : %d(ms)\n",STOPTIME)
    printf("WEIGHT_200 %f WEIGHT_300 %f WEIGHT_301 %f\n",WEIGHT_200,WEIGHT_300,WEIGHT_301)
    print "PC.NHOST ",pc.nhost
}

objref pns,lns,rns

proc mkNetwork(){
    mkCells()
    if(pc.id == 0){
	printf( "pc.id\tpn\tln\trn\n")
    }
    printf("%d\t%d\t%d\t%d\n",pc.id, pns.count(), lns.count(), rns.count())
    mkConnections()
}
{load_file("divider.hoc")}
objref CELLM

proc mkCells(){localobj pn,ln,rn, nc, nil
    loadinfo(info_filename)
    //loadinfo(info_filename_rn)
    NCELLS = NPN + NLN + NRN
    
    CELLM = divider(pc.nhost)
    pns = new List()// projection neurons
    lns = new List()// local interneurons
    rns = new List()// receptor neurons
    
    if(pc.id==0) {print "NCELLS ",NCELLS}

    for i=0, NCELLS-1{
	if((i%pc.nhost==pc.id)&&(i<NPN)){
	    j = i
	    pn = new CellSwc(pn_path[j].swcpath,pn_matrix.x[j][0],pn_matrix.x[j][1],pn_matrix.x[j][2],pn_matrix.x[j][3])
	    pn.setPath(pn_path[j].ppath, pn_path[j].synpath)
	    pn.setNid()

	    pn.cellbodylist = areaList(39,38,0)
	    pn.dendlist = areaList(97,98,0)
            pn.axonlist = areaList(99,100,0)
	    pn.setSpikegenlist(SPIKEGEN_POS, SPIKEGEN_SIZE)
	    pn.spikegenlist.printnames()
	    initModel_PN(pn)
	    //pn.insertHH()
	    //pn.insertHH_K()
	    //pn.insertFukuda_tunned()

	    pns.append(pn)
	    //print "pn ", i, j
	    nc = pn.connect2target(0,nil)
	    //pns.o(0).mkSynapses("./synlist/fromRN/050622_4_sn_SynapseList.dat")
	    
	    pc.set_gid2node(pn.gid,pc.id)
	    pc.cell(pn.gid,nc)
	    //psection()
	    
	}else if((i%pc.nhost==pc.id)&&(i>=NPN && i<NPN+NLN)){
	    j = i-NPN
	    ln = new CellSwc(ln_path[j].swcpath,ln_matrix.x[j][0],ln_matrix.x[j][1],ln_matrix.x[j][2],ln_matrix.x[j][3])
	    ln.setPath(ln_path[j].ppath, ln_path[j].synpath)
	    ln.setNid()
	    //ln.insertLNlla()
	    ln.insertHH()
	    //ln.insertHH_K()
	    lns.append(ln)
	    //if(j==0) ln.mkSynapses("./synlist/fromRN/040823_5_sn_SynapseList.dat")
	    //if(j==1) ln.mkSynapses("./synlist/fromRN/050205_7_sn_SynapseList.dat")
	    //print "ln ", i, j
	    nc = ln.connect2target(0,nil)
	    
	    pc.set_gid2node(ln.gid,pc.id)
	    pc.cell(ln.gid,nc)
	    //psection()

	}else if(i>=NPN+NLN){
	    if(pc.nhost>NPN+NLN){
		if((i-NLN-NPN)%(pc.nhost-NPN-NLN)==(pc.id-NPN-NLN)){
		    j = i-NPN-NLN
		    //print "j & i",j, i
		    rn = new CellSwc(rn_path[j].swcpath,-1,rn_matrix.x[j][0],rn_matrix.x[j][1],rn_matrix.x[j][2])
		    rn.getAxon()
		    rn.setPath(rn_path[j].ppath, rn_path[j].synpath)
		    rn.setGid()
		    rn.setNid()
		    //rn.insertHH_RN()
		    rn.insertHH_K()
		    //rn.insertHH()
		    //print "SectionNumber " ,rn.SectionNum
		    
		    rns.append(rn)
		    //print "rn ", i, j, pc.id
		    nc = rn.connect2target(0,nil)

		    pc.set_gid2node(rn.gid,pc.id)
		    pc.cell(rn.gid,nc)
		    //psection()
		}
	    }else if(pc.nhost<=NPN+NLN){
		if(i%pc.nhost==pc.id){
		    //print "j & i",j, i
		    j = i-NPN-NLN
		    rn = new CellSwc(rn_path[j].swcpath,-1,rn_matrix.x[j][0],rn_matrix.x[j][1],rn_matrix.x[j][2])
		    rn.getAxon()
		    rn.setPath(rn_path[j].ppath, rn_path[j].synpath)
		    rn.setGid()
		    rn.setNid()
		    //rn.insertHH_RN()
		    rn.insertHH_K()
		    //rn.insertHH()
		    //print "SectionNumber " ,rn.SectionNum
		    rns.append(rn)
		    //print "rn ", i, j, pc.id
		    nc = rn.connect2target(0,nil)
		    
		    pc.set_gid2node(rn.gid,pc.id)
		    pc.cell(rn.gid,nc)
		    
		}
	    }else{
		print "SOMETHING WRONG IN MAKE RECEPTOR"
	    }
	    
	}
    }
    pc.multisplit()
    pc.barrier()
}

proc initModel_PN() { local i, j, axonnum, ncells, v_init localobj tmplist, pn
    pn = $o1

    pn forall {
	uninsert pas
	uninsert GPeA_k
    }
		
    forsec pn.noaxonlist {
	insert pas
	e_pas = EL
	g_pas = GL
	cm = CM
    }
    forsec pn.axonlist {
	insert GPeA_k
	gnabar_GPeA_k = GNABAR*0.1
	gkdrbar_GPeA_k = GKDRBAR*0.1
	gcatbar_GPeA_k = GCATBAR*0.1
	gkcabar_GPeA_k = GKCABAR*0.1
	kca_GPeA_k = KCA
	kna_GPeA_k = KNA
	kk_GPeA_k = KNA
	caGain_GPeA_k = CAGAIN
	vol_GPeA_k = PI*diam*diam*L/4 * 1e-15
	gl_GPeA_k = GL
	el_GPeA_k = EL
	cm = CM
    }
    
    pn.spikegenlist = new SectionList()
    axonnum = countSL(pn.axonlist)
    tmplist = sl2list(pn.axonlist)
    SPIKEGEN_POS = int(SPIKEGEN_POS)
    SPIKEGEN_SIZE = int(SPIKEGEN_SIZE)
    j = SPIKEGEN_POS
    while(j < axonnum && j < SPIKEGEN_POS+SPIKEGEN_SIZE) {
 	tmplist.o(j).sec pn.spikegenlist.append()
 	j+=1
    }
    forsec pn.spikegenlist {
	gnabar_GPeA_k = GNABAR*20
	gkdrbar_GPeA_k = GKDRBAR*20
	//gcatbar_GPeA_k = GCATBAR*0.1
	//gkcabar_GPeA_k = GKCABAR*0.1
    }
    //stdinit() Why do i need to use this?
}

{load_file("connect.hoc")}
proc mkConnections(){
    //connectRNtoOthers()
    connectNtoN()
    //connectNtoN_NET_GABA()
    /*
    GID_BASE = connectNtoN_GABA()
    pc.barrier()
    if(pc.id == 0){printf("gid_base %d\n",GID_BASE)}
    connectNtoN_DUMMY(GID_BASE)
    */
}

if(pc.id==0)print "MAKE NETWORK"
mkNetwork()
pc.barrier()

{load_file("stim.hoc")}
proc mkStimulations(){
    //mkIntermitStim()
    //mkIclamp()
    //mkSerialStim()
    mkIclamp_pn()
}

if(pc.id==0)print "SET STIMULATION"
printf("SET STIMULATION[%d]\n",pc.id)
mkStimulations()
printf("SET STIMULATION END[%d]\n",pc.id)
pc.barrier()
{load_file("recorder.hoc")}
proc setRecorder(){
    setVoltageRecord()
    //setGABArecord()
    //setDummyRecord()
    //setPreGABArecord()
    spikerecord()
}
if(pc.id==0)print "SET RECORDER"
printf("SET RECORDER[%d]\n",pc.id)
setRecorder()
printf("SET RECORDER END[%d]\n",pc.id)

pc.barrier()

//pc.setup_transfer()
tstop = STOPTIME
if(pc.id==0)print "START RUN"
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

if(pc.id==0)print "FINISHED "
if(pc.id == 0){printf("PRINTING[%d]\n",pc.id)}
proc setPrinter(){
    fprintVoltageRecord()
    //fprintGABArecord()
    //fprintDummyRecord()
    //fprintSynapseList()
    //fprintPreGABArecord()
    spikeout()
}

setPrinter()
if(pc.id == 0){
    printf("END PROGRAM[%d]\n",pc.id)
}
{pc.runworker()}
{pc.done()}
quit()