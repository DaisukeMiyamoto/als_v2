{load_file("nrngui.hoc")}
{load_file("netparmpi.hoc")}
objref pnm
//pnm = new ParallelNetManager(0)
objref pc
//pc = pnm.pc
pc = new ParallelContext()
{load_file("Stick.hoc")}
{load_file("ranstream.hoc")}

nPN = 1   // Number of BAL-PNs
nLN = 1     // Number of LN-lla

NCELL = nPN + nLN
// NCELL : number of whole cells

TSTOP = 1500
if(pc.id == 0){
    print "NCELL ", NCELL
    print "PC.NHOST ",pc.nhost
}
objref cells, nclist
objref ranlist
proc mknet(){
    print "MAKE CELLS"
    mkcells($1)
    print "CONNECT CELLS"
    //prl_connect_gaba()
    prl_connect_gaba2()
}

proc mkcells(){local i,ncell localobj cell, nc, nil
    ncell = $1
    cells = new List()
    
    for(i=pc.id; i<ncell; i+=pc.nhost){
	cell = new Stick()
	cells.append(cell)
	if(i < nPN){
	    printf("MAKE PN[%d] i:%d\n",pc.id,i)
	    cell.insertFukuda()
	    cell.setType(1)
	    cell.setExp2Syn(-75)
	}else if((i>=nPN) && (i<nPN + nLN)){
	    printf("MAKE LN[%d] i:%d\n",pc.id,i)
	    //cell.insertLNlla()
	    cell.insertLNlla3()
	    cell.setType(4)
	}else{
	    printf("mkcells error")
	    quit()
	}
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
    }
}

objref gabalist, dummylist
//prl : parallel
proc prl_connect_gaba(){localobj gaba, c1, c2, g1, g2
    gabalist  = new List()
    dummylist = new List()
    print "pc.gid2obj"
    
    if(pc.gid_exists(1)){
	print "0"
	c2 = pc.gid2obj(1) //pre_synapse
	c2.soma {
	    g2 = new PRL_GABA(0.5) dummylist.append(g2)
	    pc.target_var(&g2.dummy,11)
	    pc.source_var(&v(.5),10)
	}
    }
    if(pc.gid_exists(0)){
	print "1"
	c1 = pc.gid2obj(0) //post_synapse
	c1.soma {
	    g1 = new PRL_GABA(0.5) gabalist.append(g1)
	    g1.gmax = 2.0
	    pc.target_var(&g1.pre,10)
	    pc.source_var(&v(.5),11)
	}
    }
    
    /*
    if(pc.id == 0){
	gaba = cells.object(1).setgaba(2.0)
	//setpointer gaba.pre, cells.object(j).soma.v(0.5)
	gabalist.append(gaba)
	pc.target_var(&gaba.pre,10)
    }

    if(pc.id == 0){
	cells.object(0).soma pc.source_var(&v(0.5),10)
    }
    */
    pc.barrier()
}

proc prl_connect_gaba2(){localobj gaba, c1, c2, g1, g2
    gabalist  = new List()
    dummylist = new List()

    if(pc.gid_exists(1)){
	print "0"
	c2 = pc.gid2obj(1) //pre_synapse
	g2 = c2.setGABA(0)
	dummylist.append(g2)
	pc.target_var(&g2.dummy,11)
	pc.source_var(&c2.soma.v(.5),10)
    }
    if(pc.gid_exists(0)){
	print "1"
	c1 = pc.gid2obj(0) //post_synapse
	g1 = c1.setGABA(2.0)
	gabalist.append(g1)
	pc.target_var(&g1.pre,10)
	pc.source_var(&c1.soma.v(.5),11)
    }
    pc.barrier()
}

mknet(NCELL)

proc mkstim(){
    for i = 0, cells.count -1 {
	if(cells.object(i).type == 1){
	    cells.object(i).setStim(50,35000)
	}else if(cells.object(i).type == 4){
	    cells.object(i).setStim(50,15000)
	}
    }
}
//mkstim()
objref r_delay1, r_delay2, r_imax1, r_imax2
proc mkstim_random(){local i
    r_delay1 = new Random()
    r_delay2 = new Random()
    r_imax1 = new Random()
    r_imax2 = new Random()
    
    delay2 = 200

    r_delay1.uniform(0,50)
    r_delay2.uniform(delay2,delay2+50)
    r_imax1.uniform(35000,35000)
    r_imax2.uniform(15000,15000)

    imax1 = 35000*1.5
    imax2 = 15000*1.25
    
    Interval = 300
    for i = 0, cells.count -1 {
	if(cells.object(i).type == 1){
	    cells.object(i).Delay = r_delay1.repick()
	    //cells.object(i).setIntermitStim_gaus(cells.object(i).Delay,35000,Interval,imax1,20,0.00)
	}else if(cells.object(i).type == 4){
	    //cells.object(i).setStim(r_delay.repick(),r_imax2.repick())
	    //print "type 4 ",i
	    cells.object(i).Delay = r_delay2.repick()
	    cells.object(i).setIntermitStim_gaus(cells.object(i).Delay,15000,Interval,imax2,20,0.00)
	}
    }
}

mkstim_random()

proc setVoltageRecord(){local i
    for i = 0, cells.count -1{
	cells.object(i).setVoltageRecord()
    }
}
setVoltageRecord()

objref tvec, vec
proc setVoltageRecord_gaba(){local i
    tvec = new Vector()
    vec  = new Vector()
    tvec.record(&t)
    if(gabalist.count != 0){
	print gabalist.object(0)
	vec.record(&gabalist.object(0).pre)
    }
}
//setVoltageRecord_gaba()

proc setSpikeRecord(){local i
    for i = 0, cells.count -1{
	cells.object(i).setSpikeRecord()
    }
}
setSpikeRecord()

pc.barrier()
print "RUN"
tstop = TSTOP
pc.setup_transfer()
//{pnm.set_maxstep(10)}
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}
print "FINISH"
proc printSpikeRecord(){local i
    for i = 0, cells.count -1{
	if(cells.object(i).type<4){
	    if(i%1==0){
		cells.object(i).printSpikeRecord2(pc.id,i, Interval,TSTOP,imax1,0)
		//		cells.object(i).printSpikeRecord2(pc.id,i, Interval,TSTOP,imax1,imax2)
	    }
	}else{
	    if(i%1==0){
		//		cells.object(i).printSpikeRecord2(pc.id,i, Interval,TSTOP,imax1,imax2)
		cells.object(i).printSpikeRecord2(pc.id,i, Interval,TSTOP,imax1,0)
	    }
	}
    }
}

printSpikeRecord()
proc printVoltageRecord(){
    for i = 0, cells.count -1{
	if(cells.object(i).type<4){
	    if(i%1==0){
		cells.object(i).printVoltageRecord3(pc.id,i)
	    }
	}else{
	    if(i%1==0){
		cells.object(i).printVoltageRecord3(pc.id,i)
	    }
	}
    }
}
printVoltageRecord()

objref mt, file
proc printVoltageRecord_gaba(){local i
    mt = new Matrix()
    file = new File()
    
    //tvec.printf()
    mt.resize(tvec.size(),2)
    mt.setcol(0,tvec)
    mt.setcol(1,vec)
    
    //mt.printf("%5.5f\t")
    strdef filename
    //sprint(filename,"./record/%dgabaVoltage_0.txt",pc.id) 
    sprint(filename,"./%dgabaVoltage_0.txt",pc.id) 
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}
//printVoltageRecord_gaba()

{pc.runworker()}
{pc.done()}
quit()