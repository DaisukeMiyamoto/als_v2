//************************************************
// FILE NAME : main.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
// mkNetwork()
// mkCells()
// mkConnections()
// mkStimulations()
// setRecorder()
// setPrinter()
//************************************************
{load_file("nrngui.hoc")}
{load_file("stdlib.hoc")}
{load_file("CellSwc3.hoc")}
{load_file("loadinfo.hoc")}

RNperSYN = 5

strdef info_filename
info_filename = "./info/network_info_3cells.dat"
strdef info_filename_rn
info_filename_rn = "./info/network_info_2000rns.dat"

objref pc
pc = new ParallelContext()
if(pc.id == 0){
    print "PC.NHOST ",pc.nhost
}
objref pns,lns,rns

proc mkNetwork(){
    mkCells()
    if(pc.id == 0){
	printf( "pc.id\tpn\tln\trn\n")
    }
    printf("%d\t%d\t%d\t%d\n",pc.id, pns.count(), lns.count(), rns.count())
    mkConnections()
}
{load_file("divider.hoc")}
objref CELLM
proc mkCells(){localobj pn,ln,rn, nc, nil
    loadinfo(info_filename)
    loadinfo(info_filename_rn)
    NCELLS = NPN + NLN + NRN
    CELLM = divider(pc.nhost)
    pns = new List()// projection neurons
    lns = new List()// local interneurons
    rns = new List()// receptor neurons
    
    if(pc.id==0) {print "NCELLS ",NCELLS}

    for i=0, NCELLS-1{
	if((i%pc.nhost==pc.id)&&(i<NPN)){
	    j = i
	    pn = new CellSwc(pn_path[j].swcpath,pn_matrix.x[j][0],pn_matrix.x[j][1],pn_matrix.x[j][2],pn_matrix.x[j][3])
	    pn.setPath(pn_path[j].ppath, pn_path[j].synpath)
	    pns.append(pn)
	    //print "pn ", i, j
	    nc = pn.connect2target(0,nil)
	    //pns.o(0).mkSynapses("./synlist/fromRN/050622_4_sn_SynapseList.dat")
	    
	    pc.set_gid2node(i,pc.id)
	    pc.cell(i,nc)
	    
	}else if((i%pc.nhost==pc.id)&&(i>=NPN && i<NPN+NLN)){
	    j = i-NPN
	    ln = new CellSwc(ln_path[j].swcpath,ln_matrix.x[j][0],ln_matrix.x[j][1],ln_matrix.x[j][2],ln_matrix.x[j][3])
	    ln.setPath(ln_path[j].ppath, ln_path[j].synpath)
	    lns.append(ln)
	    //if(j==0) ln.mkSynapses("./synlist/fromRN/040823_5_sn_SynapseList.dat")
	    //if(j==1) ln.mkSynapses("./synlist/fromRN/050205_7_sn_SynapseList.dat")
	    //print "ln ", i, j
	    nc = ln.connect2target(0,nil)
	    
	    pc.set_gid2node(i,pc.id)
	    pc.cell(i,nc)

	}else if(i>=NPN+NLN){
	    if(pc.nhost>NPN+NLN){
		if((i-NLN-NPN)%(pc.nhost-NPN-NLN)==(pc.id-NPN-NLN)){
		    j = i-NPN-NLN
		    //print "j & i",j, i
		    rn = new CellSwc(rn_path[j].swcpath,-1,rn_matrix.x[j][0],rn_matrix.x[j][1],rn_matrix.x[j][2])
		    rn.getAxon()
		    rn.setPath(rn_path[j].ppath, rn_path[j].synpath)
		    //print "SectionNumber " ,rn.SectionNum
		    rns.append(rn)
		    //print "rn ", i, j, pc.id
		    nc = rn.connect2target(0,nil)

		    pc.set_gid2node(i,pc.id)
		    pc.cell(i,nc)

		}
	    }else if(pc.nhost<=NPN+NLN){
		if(i%pc.nhost==pc.id){
		    //print "j & i",j, i
		    j = i-NPN-NLN
		    rn = new CellSwc(rn_path[j].swcpath,-1,rn_matrix.x[j][0],rn_matrix.x[j][1],rn_matrix.x[j][2])
		    rn.getAxon()
		    rn.setPath(rn_path[j].ppath, rn_path[j].synpath)
		    //print "SectionNumber " ,rn.SectionNum
		    rns.append(rn)
		    //print "rn ", i, j, pc.id
		    nc = rn.connect2target(0,nil)
		    
		    pc.set_gid2node(i,pc.id)
		    pc.cell(i,nc)
	
		}
	    }else{
		print "SOMETHING WRONG IN MAKE RECEPTOR"
	    }
	}
    
    }
    pc.barrier()
}

{load_file("connect.hoc")}
proc mkConnections(){
    connectRNtoOthers()
    connectNtoN()
}
mkNetwork()
pc.barrier()

proc mkStimulations(){

}

proc setRecorder(){

}

tstop = 0
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

proc setPrinter(){

}

{pc.runworker()}
{pc.done()}
quit()